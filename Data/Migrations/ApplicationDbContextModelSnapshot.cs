// <auto-generated />
using System;
using InventiCloud.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventiCloud.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventiCloud.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "your-user-id-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76f265fe-8f54-4e0b-864c-c8dad039dcce",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEundGMvNML6V5Z9QkRdnKEu2MpgUBVFn9RC5nSuMEt+uJnx/ozmotUKRh4SJSwcbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7f4347f-3409-498c-ba30-c2ee57caba4c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeId"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttributeSetId")
                        .HasColumnType("int");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("AttributeId");

                    b.HasIndex("AttributeSetId");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.AttributeSet", b =>
                {
                    b.Property<int>("AttributeSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeSetId"));

                    b.Property<string>("AttributeSetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeSetId");

                    b.ToTable("AttributeSets", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.AttributeValue", b =>
                {
                    b.Property<int>("AttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeValueId"));

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("AttributeValueId");

                    b.ToTable("AttributeValues", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            Address = "123 Main St",
                            BranchName = "Branch A",
                            City = "Anytown",
                            Country = "USA",
                            Email = "warehouse@example.com",
                            PhoneNumber = "555-123-4567",
                            PostalCode = "12345",
                            Region = "State"
                        },
                        new
                        {
                            BranchId = 2,
                            Address = "456 Oak Ave",
                            BranchName = "Branch B",
                            City = "Springfield",
                            Country = "Canada",
                            Email = "retailA@example.com",
                            PhoneNumber = "123-456-7890",
                            PostalCode = "A1B 2C3",
                            Region = "Province"
                        },
                        new
                        {
                            BranchId = 3,
                            Address = "789 Pine Ln",
                            BranchName = "Branch C",
                            City = "London",
                            Country = "UK",
                            Email = "distribution@example.com",
                            PhoneNumber = "+44 20 1234 5678",
                            PostalCode = "SW1A 1AA",
                            Region = "England"
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.BranchAccount", b =>
                {
                    b.Property<int>("BranchAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchAccountId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("BranchAccountId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchAccounts", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Eyeglasses"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Contact Lenses"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Reading Glasses"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Eye Care Products"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Sunglasses"
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("Allocated")
                        .HasColumnType("int");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("IncomingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OnHandquantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventories", (string)null);

                    b.HasData(
                        new
                        {
                            InventoryId = 1,
                            Allocated = 0,
                            AvailableQuantity = 100,
                            BranchId = 1,
                            IncomingQuantity = 0,
                            OnHandquantity = 100,
                            ProductId = 1
                        },
                        new
                        {
                            InventoryId = 2,
                            Allocated = 0,
                            AvailableQuantity = 50,
                            BranchId = 2,
                            IncomingQuantity = 0,
                            OnHandquantity = 50,
                            ProductId = 1
                        },
                        new
                        {
                            InventoryId = 3,
                            Allocated = 0,
                            AvailableQuantity = 75,
                            BranchId = 3,
                            IncomingQuantity = 0,
                            OnHandquantity = 75,
                            ProductId = 1
                        },
                        new
                        {
                            InventoryId = 4,
                            Allocated = 0,
                            AvailableQuantity = 200,
                            BranchId = 1,
                            IncomingQuantity = 0,
                            OnHandquantity = 200,
                            ProductId = 2
                        },
                        new
                        {
                            InventoryId = 5,
                            Allocated = 0,
                            AvailableQuantity = 150,
                            BranchId = 2,
                            IncomingQuantity = 0,
                            OnHandquantity = 150,
                            ProductId = 2
                        },
                        new
                        {
                            InventoryId = 6,
                            Allocated = 0,
                            AvailableQuantity = 150,
                            BranchId = 3,
                            IncomingQuantity = 0,
                            OnHandquantity = 150,
                            ProductId = 2
                        },
                        new
                        {
                            InventoryId = 7,
                            Allocated = 0,
                            AvailableQuantity = 80,
                            BranchId = 1,
                            IncomingQuantity = 0,
                            OnHandquantity = 80,
                            ProductId = 3
                        },
                        new
                        {
                            InventoryId = 8,
                            Allocated = 0,
                            AvailableQuantity = 120,
                            BranchId = 2,
                            IncomingQuantity = 0,
                            OnHandquantity = 120,
                            ProductId = 3
                        },
                        new
                        {
                            InventoryId = 9,
                            Allocated = 0,
                            AvailableQuantity = 0,
                            BranchId = 3,
                            IncomingQuantity = 0,
                            OnHandquantity = 90,
                            ProductId = 3
                        },
                        new
                        {
                            InventoryId = 10,
                            Allocated = 0,
                            AvailableQuantity = 300,
                            BranchId = 1,
                            IncomingQuantity = 0,
                            OnHandquantity = 300,
                            ProductId = 4
                        },
                        new
                        {
                            InventoryId = 11,
                            Allocated = 0,
                            AvailableQuantity = 250,
                            BranchId = 2,
                            IncomingQuantity = 0,
                            OnHandquantity = 250,
                            ProductId = 4
                        },
                        new
                        {
                            InventoryId = 12,
                            Allocated = 0,
                            AvailableQuantity = 280,
                            BranchId = 3,
                            IncomingQuantity = 0,
                            OnHandquantity = 280,
                            ProductId = 4
                        },
                        new
                        {
                            InventoryId = 13,
                            Allocated = 0,
                            AvailableQuantity = 60,
                            BranchId = 1,
                            IncomingQuantity = 0,
                            OnHandquantity = 60,
                            ProductId = 5
                        },
                        new
                        {
                            InventoryId = 14,
                            Allocated = 0,
                            AvailableQuantity = 40,
                            BranchId = 2,
                            IncomingQuantity = 0,
                            OnHandquantity = 40,
                            ProductId = 5
                        },
                        new
                        {
                            InventoryId = 15,
                            Allocated = 0,
                            AvailableQuantity = 70,
                            BranchId = 3,
                            IncomingQuantity = 0,
                            OnHandquantity = 70,
                            ProductId = 5
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("AttributeSetId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("AttributeSetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductName")
                        .IsUnique();

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "VisionGuard",
                            CategoryId = 1,
                            Description = "High-quality glasses to protect your eyes from harmful blue light.",
                            ImageURL = "glasses_blue_light.jpg",
                            ProductName = "Premium Blue Light Blocking Glasses",
                            SKU = "VG-BL-001",
                            UnitCost = 50.00m,
                            UnitPrice = 120.00m,
                            isActive = true
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "AquaView",
                            CategoryId = 2,
                            Description = "Comfortable daily disposable contact lenses for clear vision.",
                            ImageURL = "contact_lenses_daily.jpg",
                            ProductName = "Daily Disposable Contact Lenses",
                            SKU = "AV-CD-002",
                            UnitCost = 15.00m,
                            UnitPrice = 35.00m,
                            isActive = true
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "ReadWell",
                            CategoryId = 3,
                            Description = "Stylish reading glasses with anti-glare coating for reduced eye strain.",
                            ImageURL = "reading_glasses_anti_glare.jpg",
                            ProductName = "Anti-Glare Reading Glasses",
                            SKU = "RW-RG-003",
                            UnitCost = 25.00m,
                            UnitPrice = 60.00m,
                            isActive = true
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "MoisturePlus",
                            CategoryId = 4,
                            Description = "Relief from dry, irritated eyes with these lubricating eye drops.",
                            ImageURL = "eye_drops_dry_eyes.jpg",
                            ProductName = "Eye Drops for Dry Eyes",
                            SKU = "MP-ED-004",
                            UnitCost = 8.00m,
                            UnitPrice = 20.00m,
                            isActive = true
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "SunStyle",
                            CategoryId = 1,
                            Description = "Fashionable sunglasses with UV protection for sunny days.",
                            ImageURL = "designer_sunglasses.jpg",
                            ProductName = "Designer Sunglasses",
                            SKU = "SS-SG-005",
                            UnitCost = 80.00m,
                            UnitPrice = 200.00m,
                            isActive = true
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("ProductAttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductAttributeValueId"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductAttributeValueId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationBranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PurchasedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DestinationBranchId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierCode");

                    b.ToTable("PurchaseOrders", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<int>("PurchaseOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderItemId"));

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("PurchaseOrderItemId");

                    b.HasIndex("ProductID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("PurchaseOrderItems", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.PurchaseOrderStatus", b =>
                {
                    b.Property<int>("PurchaseOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseOrderStatusId");

                    b.ToTable("PurchaseOrderStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            PurchaseOrderStatusId = 1,
                            StatusName = "Draft"
                        },
                        new
                        {
                            PurchaseOrderStatusId = 2,
                            StatusName = "Ordered"
                        },
                        new
                        {
                            PurchaseOrderStatusId = 3,
                            StatusName = "Completed"
                        },
                        new
                        {
                            PurchaseOrderStatusId = 4,
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.SalesOrder", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderBranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderBranchId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("SalesOrders", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.SalesOrderItem", b =>
                {
                    b.Property<int>("SalesOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderItemId"));

                    b.Property<decimal?>("Discount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("SalesOrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderItems", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.SalesPerson", b =>
                {
                    b.Property<int>("SalesPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesPersonId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesPersonId");

                    b.ToTable("SalesPersons", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.StockAdjustment", b =>
                {
                    b.Property<int>("StockAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockAdjustmentId"));

                    b.Property<string>("AdjustedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AdjustedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceBranchId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("StockAdjustmentId");

                    b.HasIndex("AdjustedBy");

                    b.HasIndex("ReasonId");

                    b.HasIndex("SourceBranchId");

                    b.HasIndex("StatusId");

                    b.ToTable("StockAdjustments", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.StockAdjustmentItem", b =>
                {
                    b.Property<int>("StockAdjustmentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockAdjustmentItemId"));

                    b.Property<int>("AdjustedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PreviousQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockAdjustmentId")
                        .HasColumnType("int");

                    b.HasKey("StockAdjustmentItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockAdjustmentId");

                    b.ToTable("StockAdjustmentItems", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.StockAdjustmentReason", b =>
                {
                    b.Property<int>("StockAdjustmentReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockAdjustmentReasonId"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockAdjustmentReasonId");

                    b.ToTable("StockAdjustmentReasons", (string)null);

                    b.HasData(
                        new
                        {
                            StockAdjustmentReasonId = 1,
                            Reason = "Damaged/Defective"
                        },
                        new
                        {
                            StockAdjustmentReasonId = 2,
                            Reason = "Loss/Shrinkage"
                        },
                        new
                        {
                            StockAdjustmentReasonId = 3,
                            Reason = "Unexpected Receipt/Found"
                        },
                        new
                        {
                            StockAdjustmentReasonId = 4,
                            Reason = "Physical Count Variance"
                        },
                        new
                        {
                            StockAdjustmentReasonId = 5,
                            Reason = "Expired/Obsolete"
                        },
                        new
                        {
                            StockAdjustmentReasonId = 6,
                            Reason = "Initial Inventory Adjustment:"
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.StockAdjustmentStatus", b =>
                {
                    b.Property<int>("StockAdjustmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockAdjustmentStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockAdjustmentStatusId");

                    b.ToTable("StockAdjustmentStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            StockAdjustmentStatusId = 1,
                            StatusName = "Draft"
                        },
                        new
                        {
                            StockAdjustmentStatusId = 2,
                            StatusName = "Completed"
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.StockTransfer", b =>
                {
                    b.Property<int>("StockTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTransferId"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationBranchId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceBranchId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("StockTransferId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DestinationBranchId");

                    b.HasIndex("SourceBranchId");

                    b.HasIndex("StatusId");

                    b.ToTable("StockTransfers", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.StockTransferItem", b =>
                {
                    b.Property<int>("StockTransferItemlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTransferItemlId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockTransferId")
                        .HasColumnType("int");

                    b.Property<int>("TransferQuantity")
                        .HasColumnType("int");

                    b.HasKey("StockTransferItemlId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockTransferId");

                    b.ToTable("StockTransferItems", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.StockTransferStatus", b =>
                {
                    b.Property<int>("StockTransferStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTransferStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockTransferStatusId");

                    b.ToTable("StockTransferStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            StockTransferStatusId = 1,
                            StatusName = "Allocated"
                        },
                        new
                        {
                            StockTransferStatusId = 2,
                            StatusName = "In Transit"
                        },
                        new
                        {
                            StockTransferStatusId = 3,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            StockTransferStatusId = 4,
                            StatusName = "Completed"
                        });
                });

            modelBuilder.Entity("InventiCloud.Entities.Supplier", b =>
                {
                    b.Property<string>("SupplierCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierCode");

                    b.HasIndex("SupplierCode")
                        .IsUnique();

                    b.ToTable("Suppliers", (string)null);

                    b.HasData(
                        new
                        {
                            SupplierCode = "SUP001",
                            Address = "123 Main St",
                            City = "New York",
                            Company = "Global Tech Inc.",
                            ContactPerson = "John Doe",
                            Country = "USA",
                            Email = "john.doe@globaltech.com",
                            PhoneNumber = "+15551234567",
                            PostalCode = "12345",
                            SupplierName = "Global Electronics"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InventiCloud.Entities.Attribute", b =>
                {
                    b.HasOne("InventiCloud.Entities.AttributeSet", "AttributeSet")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeSet");
                });

            modelBuilder.Entity("InventiCloud.Entities.BranchAccount", b =>
                {
                    b.HasOne("InventiCloud.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Branch", "Branch")
                        .WithMany("BranchAccounts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("InventiCloud.Entities.Inventory", b =>
                {
                    b.HasOne("InventiCloud.Entities.Branch", "Branch")
                        .WithMany("Inventories")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventiCloud.Entities.Product", b =>
                {
                    b.HasOne("InventiCloud.Entities.AttributeSet", "AttributeSet")
                        .WithMany()
                        .HasForeignKey("AttributeSetId");

                    b.HasOne("InventiCloud.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeSet");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("InventiCloud.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("InventiCloud.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.AttributeValue", "AttributeValue")
                        .WithMany()
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("AttributeValue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventiCloud.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("InventiCloud.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Branch", "DestinationBranch")
                        .WithMany()
                        .HasForeignKey("DestinationBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.PurchaseOrderStatus", "PurchaseOrderStatus")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DestinationBranch");

                    b.Navigation("PurchaseOrderStatus");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("InventiCloud.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("InventiCloud.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("InventiCloud.Entities.SalesOrder", b =>
                {
                    b.HasOne("InventiCloud.Entities.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Branch", "OrderBranch")
                        .WithMany()
                        .HasForeignKey("OrderBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.SalesPerson", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderBranch");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("InventiCloud.Entities.SalesOrderItem", b =>
                {
                    b.HasOne("InventiCloud.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("InventiCloud.Entities.StockAdjustment", b =>
                {
                    b.HasOne("InventiCloud.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("AdjustedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.StockAdjustmentReason", "StockAdjustmentReason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Branch", "SourceBranch")
                        .WithMany()
                        .HasForeignKey("SourceBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.StockAdjustmentStatus", "StockAdjustmentStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("SourceBranch");

                    b.Navigation("StockAdjustmentReason");

                    b.Navigation("StockAdjustmentStatus");
                });

            modelBuilder.Entity("InventiCloud.Entities.StockAdjustmentItem", b =>
                {
                    b.HasOne("InventiCloud.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.StockAdjustment", "StockAdjustment")
                        .WithMany("StockAdjustmentItems")
                        .HasForeignKey("StockAdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockAdjustment");
                });

            modelBuilder.Entity("InventiCloud.Entities.StockTransfer", b =>
                {
                    b.HasOne("InventiCloud.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Branch", "DestinationBranch")
                        .WithMany()
                        .HasForeignKey("DestinationBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.Branch", "SourceBranch")
                        .WithMany()
                        .HasForeignKey("SourceBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.StockTransferStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DestinationBranch");

                    b.Navigation("SourceBranch");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("InventiCloud.Entities.StockTransferItem", b =>
                {
                    b.HasOne("InventiCloud.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Entities.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferItems")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InventiCloud.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InventiCloud.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventiCloud.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InventiCloud.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventiCloud.Entities.AttributeSet", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("InventiCloud.Entities.Branch", b =>
                {
                    b.Navigation("BranchAccounts");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventiCloud.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InventiCloud.Entities.Customer", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("InventiCloud.Entities.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("InventiCloud.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("InventiCloud.Entities.PurchaseOrderStatus", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("InventiCloud.Entities.SalesOrder", b =>
                {
                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("InventiCloud.Entities.StockAdjustment", b =>
                {
                    b.Navigation("StockAdjustmentItems");
                });

            modelBuilder.Entity("InventiCloud.Entities.StockTransfer", b =>
                {
                    b.Navigation("StockTransferItems");
                });

            modelBuilder.Entity("InventiCloud.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
