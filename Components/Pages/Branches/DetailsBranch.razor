@page "/store/branches/branch/{BranchName}"
@using InventiCloud.Data
@using InventiCloud.Utils
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IBranchService BranchService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator")]


<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Href="/store/branches" />
        <MudText Typo="Typo.h4">@BranchName</MudText>
    </div>

    <EditForm method="post" Model="Branch" OnValidSubmit="UpdateBranch" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">BRANCH DETAILS</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="Branch.BranchName" Label="Branch Name" For="@(() => Branch.BranchName)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="Branch.PhoneNumber" Label="Phone Number" For="@(() => Branch.PhoneNumber)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="Branch.Address" Label="Address" For="@(() => Branch.Address)" Variant="Variant.Outlined" />
            </MudItem>
            
           
        </MudGrid>
        <div class="d-flex justify-end align-items-center mt-6">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2">SAVE CHANGES</MudButton>
        </div>

    </EditForm>
</MudContainer>


@code {
    [SupplyParameterFromForm]
    private Branch Branch { get; set; } = new();

    [Parameter]
    public string BranchName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Branch = await BranchService.GetBranchByNameAsync(BranchName);

        if (Branch is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }



    private async Task UpdateBranch()
    {
        try
        {
            await BranchService.UpdateBranch(Branch);
            Snackbar.Add($"{Branch.BranchName} Updated", Severity.Success);
            NavigationManager.NavigateTo("/store/branches");

        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }


    }

    async Task OpenDialogAsync()
    {
        var parameters = new DialogParameters<DialogComponent>
      {
          {x => x.ContentText, $"Are you sure you want to delete the branch'{Branch.BranchName}'? This action cannot be undone."},
          { "Button1Text", "Delete" },
          { "Button2Text", "Cancel" },
          { "Color", Color.Error }
      };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Branch Account", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await BranchService.DeleteBranch(Branch);
                Snackbar.Add($"Branch '{Branch.BranchName}' deleted successfully.", Severity.Success);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred while deleting the branch '{Branch.BranchName}'.", Severity.Error);
            }
        }
    }

}
