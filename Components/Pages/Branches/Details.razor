@page "/store/branches/{BranchName}"
@using InventiCloud.Data
@using InventiCloud.Utils
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IBranchService BranchService
@inject IBranchAccountService BranchAccountService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "Administrator")]


<MudContainer Class="pt-5" MaxWidth="MaxWidth.Medium">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="back" Href="/store/branches" />
        <MudText Typo="Typo.h4">@BranchName</MudText>
    </div>

    <EditForm method="post" Model="@BranchViewModel" OnValidSubmit="@UpdateBranchAndUser" FormName="updateBranch" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">BRANCH DETAILS</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="BranchViewModel.Branch.BranchName" Mask="@maskOnlyLetters" Label="Branch Name" For="@(() => BranchViewModel.Branch.BranchName)" Variant="Variant.Outlined" Required />
                <MudTextField @bind-Value="BranchViewModel.Branch.PhoneNumber" Mask="@(new PatternMask("00000000000"))" Label="Phone Number" For="@(() => BranchViewModel.Branch.PhoneNumber)" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="BranchViewModel.Branch.Address" Label="Address" For="@(() => BranchViewModel.Branch.Address)" Variant="Variant.Outlined" Lines="2" />
             </MudItem>  
            <MudItem xs="12">
                <MudDivider Class="my-6" />
                <MudText Typo="Typo.h6">BRANCH ACCOUNT</MudText>
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudTextField @bind-Value="BranchViewModel.Account.Email" ReadOnly="true" Label="Email" For="@(() => BranchViewModel.Account.Email)" Variant="Variant.Outlined" Required InputType="InputType.Email" />
                <MudTextField @bind-Value="BranchViewModel.Account.Password" Label="Change Password" For="@(() => BranchViewModel.Account.Password)" Variant="Variant.Outlined" InputType="InputType.Password" />
                <MudTextField @bind-Value="BranchViewModel.Account.ConfirmPassword" Label="Confirm Password" For="@(() => BranchViewModel.Account.ConfirmPassword)" Variant="Variant.Outlined" InputType="InputType.Password" />

            </MudItem>


            <MudItem xs="12" Class="d-flex justify-end align-md-end">
                <MudButton OnClick="OpenDialogAsync" Variant="Variant.Outlined" Color="Color.Error">DELETE</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2">SAVE CHANGES</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>




@code {

    [Parameter]
    public string BranchName { get; set; }
    public IMask maskOnlyLetters = new RegexMask(@"^[a-zA-Z]+$");

    private CombinedBranchAccountViewModel BranchViewModel { get; set; } = new();


    public class CombinedBranchAccountViewModel
    {
        public Branch Branch { get; set; } = new();
        public AccountInfo Account { get; set; } = new AccountInfo();
    }


    public class AccountInfo
    {
        public string Id { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [RegularExpression("^(?=.*[0-9])(?=.*[A-Z]).+$", ErrorMessage = "Passwords must have at least one digit and one uppercase letter.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

       
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await BranchService.GetBranchByNameAsync(BranchName);

        if (data is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        BranchViewModel.Branch = data;


        BranchViewModel.Account.Id = data.ApplicationUser.Id;
        BranchViewModel.Account.Email = data.ApplicationUser.Email;

    }

    private async Task UpdateBranchAndUser(EditContext context)
    {
        try
        {
            var branch = await BranchService.UpdateBranch(BranchViewModel.Branch);
            await BranchAccountService.UpdateBranchAccountAsync(
                           BranchViewModel.Account.Id,
                           BranchViewModel.Account.Email,
                           BranchViewModel.Account.Password,
                           branch.BranchId
            );

            Snackbar.Add($"{BranchViewModel.Branch.BranchName} Updated", Severity.Success);
            NavigationManager.NavigateTo("/store/branches");

        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    async Task OpenDialogAsync()
    {
        var parameters = new DialogParameters<DialogComponent>
      {
          {x => x.ContentText, $"Are you sure you want to delete the branch'{BranchViewModel.Branch.BranchName}'? This action cannot be undone."},
          { "Button1Text", "Delete" },
          { "Button2Text", "Cancel" },
          { "Color", Color.Error }
      };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Branch Account", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await BranchService.DeleteBranch(BranchViewModel.Branch);
                Snackbar.Add($"Branch '{BranchViewModel.Branch.BranchName}' deleted successfully.", Severity.Success);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred while deleting the branch '{BranchViewModel.Branch.BranchName}'.", Severity.Error);
            }
        }
    }


    
}
