@page "/store/branches/branch/{BranchName}"
@using InventiCloud.Data
@using InventiCloud.Utils
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IBranchService BranchService
@inject IBranchAccountService BranchAccountService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "Administrator")]


<MudContainer Class="pt-5" MaxWidth="MaxWidth.Medium">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="back" Href="/store/branches" />
        <MudText Typo="Typo.h4">@BranchName</MudText>
    </div>

    <EditForm method="post" Model="@BranchViewModel" OnValidSubmit="@UpdateBranchAndUser" FormName="updateBranch" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">BRANCH DETAILS</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="BranchViewModel.Branch.BranchName" Mask="@maskOnlyLetters" Label="Branch Name" For="@(() => BranchViewModel.Branch.BranchName)" Variant="Variant.Outlined" Required />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="BranchViewModel.Branch.PhoneNumber" Mask="@(new PatternMask("0 000 000 0000"))" Label="Phone Number" For="@(() => BranchViewModel.Branch.PhoneNumber)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="BranchViewModel.Branch.Address" Label="Address" For="@(() => BranchViewModel.Branch.Address)" Variant="Variant.Outlined" Lines="2" />
            </MudItem>
            <MudItem xs="12">
                <MudDivider Class="my-6" />
                <MudText Typo="Typo.h6">BRANCH ACCOUNT</MudText>
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudTextField @bind-Value="BranchViewModel.Account.Email" Label="Email" For="@(() => BranchViewModel.Account.Email)" Variant="Variant.Outlined" Required InputType="InputType.Email" />
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudTextField @bind-Value="BranchViewModel.Account.Password" Label="Password" For="@(() => BranchViewModel.Account.Password)" Variant="Variant.Outlined" InputType="InputType.Password" />
            </MudItem>


            <MudItem xs="12" Class="d-flex align-end mt-12 gap-2">
                <MudButton Href="/store/branches" Variant="Variant.Outlined">CANCEL</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">SAVE CHANGES</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>




@code {

    [Parameter]
    public string BranchName { get; set; }
    public IMask maskOnlyLetters = new RegexMask(@"^[a-zA-Z]+$");

    private CombinedBranchAccountViewModel BranchViewModel { get; set; } = new();

    public class CombinedBranchAccountViewModel
    {
        public BranchInfo Branch { get; set; } = new BranchInfo();
        public AccountInfo Account { get; set; } = new AccountInfo();
    }

    public class BranchInfo
    {
        [Required]
        public string BranchName { get; set; }

        [Required]
        public string Address { get; set; }

        [Required]
        public string PhoneNumber { get; set; }
    }

    public class AccountInfo
    {

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

    }


    protected override async Task OnInitializedAsync()
    {
        var data = await BranchService.GetBranchByNameAsync(BranchName);

        if (data is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        BranchViewModel.Branch.BranchName = data.BranchName;
        BranchViewModel.Branch.Address = data.Address;
        BranchViewModel.Branch.PhoneNumber = data.PhoneNumber;


        BranchViewModel.Account.Email = data.ApplicationUser.Email;

    }

    private async Task UpdateBranchAndUser()
    {
        
    }

    
}
