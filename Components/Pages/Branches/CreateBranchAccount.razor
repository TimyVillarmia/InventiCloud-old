@page "/store/branches/create-account"
@using InventiCloud.Data
@using InventiCloud.Utils
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IBranchAccountService BranchAccountService
@inject IBranchService BranchService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar



<MudContainer Class="pt-5" MaxWidth="MaxWidth.Medium">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Href="/store/branches" />
        <MudText Typo="Typo.h4">CREATE BRANCH ACCOUNT</MudText>
    </div>

    <EditForm method="post" Model="ApplicationUser" OnValidSubmit="CreateAccount" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="ApplicationUser.UserName" Label="Username" For="@(() => ApplicationUser.UserName)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="ApplicationUser.Email" Label="Email" For="@(() => ApplicationUser.Email)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="ApplicationUser.Password" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="TogglePassword" AdornmentIcon="@PasswordInputIcon" Label="Password" For="@(() => ApplicationUser.Password)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="Branch" Label="Assign Branch" @bind-Value="ApplicationUser.Branch"
                                 SearchFunc="@SearchBranch" ToStringFunc="@(branch=> branch==null?null : $"{branch.BranchName}")" For="@(() => ApplicationUser.Branch)" Variant="Variant.Outlined" />
            </MudItem>
        </MudGrid>
        <MudItem xs="12" Class="d-flex align-end mt-12">
            <MudButton Href="/store/branches" Variant="Variant.Filled" Color="Color.Default" Class="ml-auto">CANCEL</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">CREATE</MudButton>
        </MudItem>
    </EditForm>
</MudContainer>


@code {

    [SupplyParameterFromForm]
    private ApplicationUserViewModel ApplicationUser { get; set; } = new();

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private IEnumerable<Branch>? _branches;


    public class ApplicationUserViewModel
    {

        public string UserName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
        public Branch Branch { get; set; }

    }

    protected override async Task OnInitializedAsync()
    {
        _branches = await BranchService.GetAllBranchAsync();
    }



    private async Task CreateAccount()
    {
        try
        {
            await BranchAccountService.AddBranchAccountAsync(ApplicationUser.UserName, ApplicationUser.Email, ApplicationUser.Password, ApplicationUser.Branch.BranchId);
            Snackbar.Add($"{ApplicationUser.UserName} Added", Severity.Success);
            NavigationManager.NavigateTo("/store/branches");

        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }


    private async Task<IEnumerable<Branch>> SearchBranch(string value, CancellationToken token)
    {
        _branches = await BranchService.GetAllBranchAsync();

        if (string.IsNullOrEmpty(value))
        {
            return _branches;
        }

        return _branches
            .Where(b => b.BranchName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    void TogglePassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
