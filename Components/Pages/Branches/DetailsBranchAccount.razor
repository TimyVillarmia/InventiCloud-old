@page "/store/branches/account/{UserName}"
@using InventiCloud.Data
@using InventiCloud.Utils
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IBranchService BranchService
@inject IBranchAccountService BranchAccountService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator")]


<MudContainer Class="pt-5" MaxWidth="MaxWidth.Medium">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Href="/store/branches" />
        <MudText Typo="Typo.h4">@UserName</MudText>
    </div>

    <EditForm method="post" Model="BranchAccount" OnValidSubmit="UpdateBranchAccount" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="BranchAccount.UserName" Label="Username" For="@(() => BranchAccount.UserName)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="BranchAccount.Email" Label="Email" For="@(() => BranchAccount.Email)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem md="12">
                <MudTextField For="@(() => BranchAccount.OldPassword)" @bind-Value="BranchAccount.OldPassword" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="TogglePassword" AdornmentIcon="@PasswordInputIcon"
                              Label="Current Password" Placeholder="current password" Variant="Variant.Outlined"
                              UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
            </MudItem>
            <MudItem md="12">
                <MudTextField For="@(() => BranchAccount.NewPassword)" @bind-Value="BranchAccount.NewPassword" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="TogglePassword" AdornmentIcon="@PasswordInputIcon"
                              Label="New Password" Placeholder="new password" Variant="Variant.Outlined"
                              UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
            </MudItem>
            <MudItem md="12">
                <MudTextField For="@(() => BranchAccount.ConfirmPassword)" @bind-Value="BranchAccount.ConfirmPassword" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="TogglePassword" AdornmentIcon="@PasswordInputIcon"
                              Label="Confirm Password" Placeholder="confirm password" Variant="Variant.Outlined"
                              UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="Branch" Label="Assign Branch" @bind-Value="BranchAccount.Branch"
                                 SearchFunc="@SearchBranch" ToStringFunc="@(branch=> branch==null?null : $"{branch.BranchName}")" For="@(() => BranchAccount.Branch)" Variant="Variant.Outlined" />
            </MudItem>
            <div class="d-flex align-end mt-12">
                <MudButton OnClick="@(() => OpenDialogAsync())" Variant="Variant.Outlined" Color="Color.Error">DELETE</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">SAVE CHANGES</MudButton>
            </div>


        </MudGrid>
    </EditForm>
</MudContainer>


@code {
    [SupplyParameterFromForm]
    private ApplicationUserViewModel BranchAccount { get; set; } = new();

    [Parameter]
    public string UserName { get; set; }

    private IEnumerable<Branch>? _branches;


    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    public class ApplicationUserViewModel
    {

        public string Id { get; set; }
        public string UserName { get; set; }
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public Branch Branch { get; set; }

    }

    protected override async Task OnInitializedAsync()
    {
        var data = await BranchAccountService.GetBranchAccountByUserName(UserName);

        if (data is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        BranchAccount.Id = data.Id;
        BranchAccount.UserName = data.UserName;
        BranchAccount.Email = data.Email;
        BranchAccount.Branch = data.Branch;



        _branches = await BranchService.GetAllBranchAsync();



    }



    private async Task UpdateBranchAccount()
    {
        try
        {
            await BranchAccountService.UpdateBranchAccountAsync(BranchAccount.Id, BranchAccount.UserName, BranchAccount.Email, BranchAccount.NewPassword, BranchAccount.Branch.BranchId);
            Snackbar.Add($"{BranchAccount.UserName} Updated", Severity.Success);
            NavigationManager.NavigateTo("/store/branches");

        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }


    }

    private async Task<IEnumerable<Branch>> SearchBranch(string value, CancellationToken token)
    {
        _branches = await BranchService.GetAllBranchAsync();

        if (string.IsNullOrEmpty(value))
        {
            return _branches;
        }

        return _branches
            .Where(b => b.BranchName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task OpenDialogAsync()
    {
        var parameters = new DialogParameters<DialogComponent>
      {
          {x => x.ContentText, $"Are you sure you want to delete the branch account for user '{BranchAccount.UserName}'? This action cannot be undone."},
          { "Button1Text", "Delete" },
          { "Button2Text", "Cancel" },
          { "Color", Color.Error }
      };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Branch Account", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await BranchAccountService.DeleteBranchAccountAsync(BranchAccount.Id);
                Snackbar.Add($"Branch account for user '{BranchAccount.UserName}' deleted successfully.", Severity.Success);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred while deleting the branch account for user '{BranchAccount.UserName}'.", Severity.Error);
            }
        }
    }


    void TogglePassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

}
