@page "/purchase/orders/create"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Data
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IPurchaseOrderService PurchaseOrderService
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Href="/catalog/products"/>
        <MudText Typo="Typo.h4">ADD PURCHASE ORDERS</MudText>
    </div>
    <MudItem xs="12">
        <MudText Typo="Typo.h6">DETAILS</MudText>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudNumericField @bind-Value="PurchaseOrder.SupplierID" HideSpinButtons="true" Label="Supplier" For="@(() => PurchaseOrder.SupplierID)" Variant="Variant.Outlined" />
        <MudNumericField @bind-Value="PurchaseOrder.DestinationBranchId" HideSpinButtons="true" Label="Destination Branch" For="@(() => PurchaseOrder.DestinationBranchId)" Variant="Variant.Outlined" />
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField @bind-Value="PurchaseOrder.ReferenceNumber" HideSpinButtons="true" Label="Purchase Order Number" ReadOnly="true" Disabled="true" For="@(() => PurchaseOrder.ReferenceNumber)" Variant="Variant.Outlined" />
        <MudDatePicker Label="Estimated Arrival" Editable="true" @bind-Date="PurchaseOrder.EstimatedArrival" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Estimated Arrival" Variant="Variant.Outlined" />
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.h6">PRODUCTS</MudText>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudAutocomplete T="Product" Label="Products" @bind-Value="NewPurchaseOrderItem.Product"
        SearchFunc="@Search" ToStringFunc="@(p=> p==null?null : $"{p.ProductName}")" />
        <MudTextField Variant="Variant.Outlined" Label="Quantity" @bind-Value="NewPurchaseOrderItem.Quantity" Immediate="true" ReadOnly="true" />
        <MudTextField Variant="Variant.Outlined" Label="Price" @bind-Value="NewPurchaseOrderItem.UnitPrice"/>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Product</MudButton>
    </MudItem>
    <MudDataGrid Items="BatchPurchaseOrderItem">
        <Columns>
            <PropertyColumn Property="poi => poi.Product.ProductName" Title="Product" />
            <PropertyColumn Property="poi => poi.Quantity" Title="Quantity" />
            <PropertyColumn Property="poi => poi.UnitPrice" Title="Price" />
            <PropertyColumn Property="poi => poi.SubTotal" Title="Subtotal" />
            @* <TemplateColumn CellClass="d-flex justify-end"> delete / remove product icon
                <CellTemplate>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                        <MudMenuItem Label="Edit" href="@($"/purchase/orders/{context.Item.ReferenceNumber}")" />
                    </MudMenu>
                </CellTemplate>
            </TemplateColumn> *@
        </Columns>
    </MudDataGrid>
    <MudItem xs="12" Class="justify-center">
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">SAVE AS DRAFT</MudButton>
    </MudItem>

</MudContainer>

@code {
    MudDataGrid<PurchaseOrderItem> dataGrid = new();

    [SupplyParameterFromForm]
    private PurchaseOrder PurchaseOrder { get; set; } = new();
    private Product selectedProduct { get; set; } = new();
    private PurchaseOrderItem NewPurchaseOrderItem { get; set; } = new();

    private List<Supplier> _supplier = new();
    private List<Branch> _branches = new();

    private IEnumerable<Product>? _products;

    private List<PurchaseOrderItem> BatchPurchaseOrderItem = new List<PurchaseOrderItem>();


    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetAllProductAsync();
    }

    private async Task AddPurchaseOrder()
    {
        // await PurchaseOrderService.AddPurchaseOrder(purchaseorder);

        PurchaseOrder = new();
        await dataGrid.ReloadServerData();
    }

    private async Task AddBatchPurchaseOrderItem()
    {
        NewPurchaseOrderItem.SubTotal = NewPurchaseOrderItem.Quantity * NewPurchaseOrderItem.UnitPrice;
        BatchPurchaseOrderItem.Add(NewPurchaseOrderItem);

    }


    private async Task<IEnumerable<Product>> Search(string value, CancellationToken token)
    {
        return _products.Where(p => p.ProductName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}
