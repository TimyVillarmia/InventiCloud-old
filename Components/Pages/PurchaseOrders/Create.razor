@page "/purchase/orders/create"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Data
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IPurchaseOrderService PurchaseOrderService
@inject IBranchService BranchService
@inject ISupplierService SupplierService
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Href="/catalog/products"/>
        <MudText Typo="Typo.h4">ADD PURCHASE ORDERS</MudText>
    </div>
    <MudGrid>
        <MudItem sm="12">
            <MudText Typo="Typo.h6">DETAILS</MudText>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudAutocomplete T="Supplier" Label="Supplier" @bind-Value="PurchaseOrder.Supplier"
            SearchFunc="@SearchSupplier" ToStringFunc="@(s=> s==null?null : $"{s.SupplierName}")" Variant="Variant.Outlined" />
            <MudTextField Class="mb-4" @bind-Value="PurchaseOrder.ReferenceNumber" HideSpinButtons="true" Label="Purchase Order Number" ReadOnly="true" Disabled="true" For="@(() => PurchaseOrder.ReferenceNumber)" Variant="Variant.Outlined" />
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudAutocomplete T="Branch" Label="Destination Branch" @bind-Value="PurchaseOrder.DestinationBranch"
            SearchFunc="@SearchBranch" ToStringFunc="@(b=> b==null?null : $"{b.BranchName}")" For="@(() => PurchaseOrder.DestinationBranch)" Variant="Variant.Outlined" />
            <MudDatePicker Label="Estimated Arrival" Editable="true" @bind-Date="PurchaseOrder.EstimatedArrival" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Estimated Arrival" Variant="Variant.Outlined" />
        </MudItem>

        <MudItem sm="12">
            <MudText Typo="Typo.h6">PRODUCTS</MudText>
        </MudItem>

        <MudItem xs="12" sm="5">
            <MudAutocomplete T="Product" Label="Products" @bind-Value="NewPurchaseOrderItem.Product"
            SearchFunc="@SearchProduct" ToStringFunc="@(p=> p==null?null : $"{p.ProductName}")" Variant="Variant.Outlined" />
        </MudItem>

        <MudItem xs="12" sm="3">
            <MudTextField Variant="Variant.Outlined" Label="Quantity" @bind-Value="NewPurchaseOrderItem.Quantity" />
        </MudItem>

        <MudItem xs="12" sm="3">
            <MudTextField Variant="Variant.Outlined" Label="Price" @bind-Value="NewPurchaseOrderItem.UnitPrice" />
        </MudItem>


        <MudItem xs="12" sm="1">
            <MudButton ButtonType="ButtonType.Submit" OnClick="AddBatchPurchaseOrderItem" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudItem>

        <MudItem sm="12">
            <MudDataGrid Items="BatchPurchaseOrderItem">
                <Columns>
                    <PropertyColumn Property="poi => poi.Product.ProductName" Title="Product" />
                    <PropertyColumn Property="poi => poi.Quantity" Title="Quantity" />
                    <PropertyColumn Property="poi => poi.UnitPrice" Title="Price" />
                    <PropertyColumn Property="poi => poi.SubTotal" Title="Subtotal" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" aria-label="delete" OnClick="@(() => RemoveBatchProduct(context.Item))" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            <MudText Typo="Typo.h5">@BatchPurchaseOrderItem.Sum(item => item.SubTotal)</MudText>

        </MudItem>

        <MudItem xs="12" Class="justify-center">
            <MudButton  Variant="Variant.Filled" Color="Color.Default" Class="ml-auto">CANCEL</MudButton>
            <MudButton ButtonType="ButtonType.Submit" OnClick="AddPurchaseOrderToDraft" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">SAVE AS DRAFT</MudButton>
        </MudItem>
    </MudGrid>




</MudContainer>

@code {
    MudDataGrid<PurchaseOrderItem> dataGrid = new();

    private PurchaseOrder PurchaseOrder { get; set; } = new();
    private Product selectedProduct { get; set; } = new();
    private PurchaseOrderItem NewPurchaseOrderItem { get; set; } = new();

    private IEnumerable<Supplier>? _suppliers;
    private IEnumerable<Branch>? _branches;
    private IEnumerable<Product>? _products;

    private List<PurchaseOrderItem> BatchPurchaseOrderItem = new List<PurchaseOrderItem>();


    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetAllProductAsync();
        _branches = await BranchService.GetAllBranchAsync();
        _suppliers = await SupplierService.GetAllSupplierAsync();
    }

    private async Task AddPurchaseOrderToDraft()
    {
        PurchaseOrder.CreatedById = "your-user-id-1"; // for testing
        await PurchaseOrderService.AddPurchaseOrderAsync(PurchaseOrder, BatchPurchaseOrderItem);

        NavigationManager.NavigateTo($"/purchase/orders/{PurchaseOrder.ReferenceNumber}");


        PurchaseOrder = new();
        await dataGrid.ReloadServerData();
    }

    private async Task AddBatchPurchaseOrderItem()
    {
        NewPurchaseOrderItem.SubTotal = NewPurchaseOrderItem.Quantity * NewPurchaseOrderItem.UnitPrice;
        BatchPurchaseOrderItem.Add(NewPurchaseOrderItem);

        NewPurchaseOrderItem = new();

    }


    private async Task<IEnumerable<Product>> SearchProduct(string value, CancellationToken token)
    {

        if (string.IsNullOrEmpty(value))
        {
            return _products; 
        }

        return _products.Where(p => p.ProductName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Supplier>> SearchSupplier(string value, CancellationToken token)
    {

        if (string.IsNullOrEmpty(value))
        {
            return _suppliers;
        }

        return _suppliers.Where(s => s.SupplierName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Branch>> SearchBranch(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _branches;
        }

        return _branches.Where(b => b.BranchName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // events
    Task RemoveBatchProduct(PurchaseOrderItem item)
    {
        BatchPurchaseOrderItem.Remove(item);
        return dataGrid.ReloadServerData();

    }


}
