@page "/purchase/orders"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Data
@inject IDialogService DialogService
@inject IPurchaseOrderService PurchaseOrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBranchService BranchService
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
<PageTitle>Purchase Orders</PageTitle>

<MudText Class="bold mb-2" Typo="Typo.h4">Purchase Orders</MudText>


@if (_branches == null)
{
    <MudContainer Class="d-flex justify-center align-items-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else if (!_branches.Any())
{
    <MudPaper Height="500px" Class="justify-center align-content-center">
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">No Branches Exist</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-3">
            To manage purchase orders, you need to have at least one branch set up in your system.
        </MudText>
        <MudContainer Class="d-flex justify-center mt-2">
            <MudButton Variant="Variant.Filled" Href="/store/branches/create" Color="Color.Primary" Class="text-uppercase">
                Create New Branch
            </MudButton>
        </MudContainer>
    </MudPaper>
}
else if (_purchaseorders == null)
{
    <MudContainer Class="d-flex justify-center align-items-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else if (!_purchaseorders.Any())
{

    <MudPaper Height="500px" Class="justify-center align-content-center">
        <MudText Class="bol" Typo="Typo.h6" Align="Align.Center">No Purchase Orders Found</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center">
            Click the button below to create your first purchase order.
        </MudText>
        <MudContainer Class="d-flex justify-center mt-2">
            <MudButton Variant="Variant.Filled" Href="/purchase/orders/create" Color="Color.Primary" Class="text-uppercase">
                Create Purchase Order
            </MudButton>
        </MudContainer>
    </MudPaper>
}
else
{

    <MudGrid>
        <MudItem sm="4">
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Variant="Variant.Outlined" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </MudItem>
        <MudItem sm="2">
            <MudSelect @bind-Value="@selectedBranch" @bind-Value:after="OnSelect" Variant="Variant.Outlined" Disabled="@autoFill">
                @foreach (Branch branch in _branches)
                {
                    <MudSelectItem Value="@branch.BranchId">@branch.BranchName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem sm="6">
            <MudButton Variant="Variant.Filled" Href="/purchase/orders/create" Color="Color.Primary" Class="text-uppercase">
                Create Purchase Order
            </MudButton>
        </MudItem>

    </MudGrid>

    <MudDataGrid @ref="dataGrid" T="PurchaseOrder" ServerData="ServerReload" MultiSelection="true" RowClick="@RowClicked">
        <Columns>
            <PropertyColumn Property="po => po.ReferenceNumber" Title="Reference Number" />
            <PropertyColumn Property="po => po.Supplier.SupplierName" Title="Supplier" />
            <PropertyColumn Property="po => po.DestinationBranch.BranchName" Title="Destination" />
            <TemplateColumn Title="Status">
                <CellTemplate>
                    <MudChip Color="@GetChipColor(context.Item.PurchaseOrderStatus.StatusName)" Size="Size.Small">@context.Item.PurchaseOrderStatus.StatusName</MudChip>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="po => po.EstimatedArrival" Title="Estimated Arrival" />
            <PropertyColumn Property="po => po.TotalAmount" Title="Total" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                        <MudMenuItem Label="Edit" href="@($"/purchase/orders/{context.Item.ReferenceNumber}")" />
                        @if (context.Item.PurchaseOrderStatus.StatusName.ToLower() == "draft")
                        {
                            <MudMenuItem Label="Delete" Class="red-text" OnClick="@(() => OpenDialogAsync(context.Item))" />

                        }
                    </MudMenu>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PurchaseOrder" />
        </PagerContent>
    </MudDataGrid>



}



@code {
    string searchString = null;
    private int selectedBranch;

    private IEnumerable<PurchaseOrder>? _purchaseorders;
    private IEnumerable<PurchaseOrder>? _filteredpurchaseorders = new List<PurchaseOrder>();
    private IEnumerable<Branch> _branches = new List<Branch>();

    MudDataGrid<PurchaseOrder> dataGrid = new();
    private ApplicationUser? CurrentUser { get; set; } // Replace ApplicationUser with your actual user class
    private bool autoFill = false;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _branches = await BranchService.GetAllBranchAsync();

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUser = await UserManager.GetUserAsync(user);

            if (CurrentUser != null)
            {
                autoFill = CurrentUser.BranchId.HasValue;
                _purchaseorders = await PurchaseOrderService.GetAllPurchaseOrderAsync(CurrentUser.BranchId);

                if (_branches.Any())
                {
                    selectedBranch = _branches.First().BranchId;

                }
                if (_branches.Any() && CurrentUser.BranchId.HasValue)
                {
                    selectedBranch = (int)CurrentUser.BranchId;
                    autoFill = true;


                }

            }

        }

    }

    private Color GetChipColor(string status)
    {
        switch (status.ToLower())
        {
            case "draft":
                return Color.Default;
            case "ordered":
                return Color.Info;
            case "completed":
                return Color.Success;
            case "cancelled":
                return Color.Error;
            default:
                return Color.Default;
        }
    }

    async Task OpenDialogAsync(PurchaseOrder purchaseorder)
    {

        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to delete the Purchase Order '{purchaseorder.ReferenceNumber}'? This action cannot be undone."},
            { "Button1Text", "Delete" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Purchase Order", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await PurchaseOrderService.DeletePurchaseOrderAsync(purchaseorder);
                Snackbar.Add("Purchase Order Deleted", Severity.Success);
                await dataGrid.ReloadServerData();

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the Purchase Order.", Severity.Error);
            }
        }

    }

    private async Task<GridData<PurchaseOrder>> ServerReload(GridState<PurchaseOrder> state)
    {
        _purchaseorders = await PurchaseOrderService.GetAllPurchaseOrderAsync(CurrentUser.BranchId);
        _filteredpurchaseorders = _purchaseorders.Where(b => b.DestinationBranchId == selectedBranch); ;

        _filteredpurchaseorders = _filteredpurchaseorders.Where(po =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (po.ReferenceNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (po.DestinationBranch.BranchName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (po.PurchaseOrderStatus.StatusName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = _filteredpurchaseorders.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(PurchaseOrder.ReferenceNumber):
                    _filteredpurchaseorders = _filteredpurchaseorders.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        po => po.ReferenceNumber
                    );
                    break;

            }
        }

        var pagedData = _filteredpurchaseorders.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<PurchaseOrder>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private Task OnSelect()
    {
        return dataGrid.ReloadServerData();
    }

    void RowClicked(DataGridRowClickEventArgs<PurchaseOrder> args)
    {


        if (args.Item == null)
        {
            return;
        }

        NavigationManager.NavigateTo($"/purchase/orders/{args.Item.ReferenceNumber}");

    }


    public async ValueTask DisposeAsync() => await PurchaseOrderService.DisposeAsync();


}
