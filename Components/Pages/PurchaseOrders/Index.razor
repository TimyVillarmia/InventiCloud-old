@page "/purchase/orders"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Data
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IPurchaseOrderService PurchaseOrderService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Index</PageTitle>

<MudText Class="bold mb-2" Typo="Typo.h4">Purchase Orders</MudText>
@if (_purchaseorders == null)
{
    <MudContainer Class="d-flex justify-center align-items-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else
{
    @if (!_purchaseorders.Any())
    {

        <MudPaper Height="500px" Class="justify-center align-content-center">
            <MudText Class="bol" Typo="Typo.h6" Align="Align.Center">No Purchase Orders Found</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center">
                Click the button below to create your first purchase order.
            </MudText>
            <MudContainer Class="d-flex justify-center mt-2">
                <MudButton Variant="Variant.Filled" Href="/purchase/orders/create" Color="Color.Primary" Class="text-uppercase">
                    Create Purchase Order
                </MudButton>
            </MudContainer>
        </MudPaper>
    }
    else
    {

        <MudGrid>
            <MudItem sm="6">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Variant="Variant.Outlined" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </MudStack>

            </MudItem>

            <MudItem sm="6">
                <MudButton Variant="Variant.Filled" Href="inventory/products/create" Color="Color.Primary" Class="text-uppercase">
                    Create Purchase Order
                </MudButton>
            </MudItem>

        </MudGrid>

        <MudDataGrid @ref="dataGrid" T="PurchaseOrder" ServerData="ServerReload" MultiSelection="true">
            <Columns>
                <PropertyColumn Property="po => po.ReferenceNumber" Title="Reference Number" />
                <PropertyColumn Property="po => po.Supplier.SupplierName" Title="Supplier"/>
                <PropertyColumn Property="po => po.DestinationBranch.BranchName" Title="Destination" />
                <PropertyColumn Property="po => po.PurchaseOrderStatus.StatusName" Title="Status" />
                <PropertyColumn Property="po => po.EstimatedArrival" Title="Estimated Arrival" />
                <PropertyColumn Property="po => po.TotalAmount" Title="Total" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                            <MudMenuItem Label="Edit" href="@($"/purchase/orders/{context.Item.ReferenceNumber}")" />
                        </MudMenu>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Product" />
            </PagerContent>
        </MudDataGrid>



    }

}


@code {
    string searchString = null;

    private IEnumerable<PurchaseOrder>? _purchaseorders;

    MudDataGrid<PurchaseOrder> dataGrid = new();

    protected override async Task OnInitializedAsync()
    {

        _purchaseorders = await PurchaseOrderService.GetAllPurchaseOrderAsync();

    }

    async Task OpenDialogAsync(PurchaseOrder purchaseorder)
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to delete the Purchase Order '{purchaseorder.PurchaseOrderId}'? This action cannot be undone."}
        };
         
        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Purchase Order", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await PurchaseOrderService.DeletePurchaseOrderAsync(purchaseorder);
                Snackbar.Add("Purchase Order Deleted", Severity.Success);
                await dataGrid.ReloadServerData();

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the Purchase Order.", Severity.Error);
            }
        }

    }

    private async Task<GridData<PurchaseOrder>> ServerReload(GridState<PurchaseOrder> state)
    {
        _purchaseorders = await PurchaseOrderService.GetAllPurchaseOrderAsync();

        _purchaseorders = _purchaseorders.Where(po =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (po.ReferenceNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (po.DestinationBranch.BranchName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (po.PurchaseOrderStatus.StatusName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = _purchaseorders.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(Product.ProductName):
                    _purchaseorders = _purchaseorders.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        po => po.ReferenceNumber
                    );
                    break;
            }
        }

        var pagedData = _purchaseorders.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<PurchaseOrder>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }


    public async ValueTask DisposeAsync() => await PurchaseOrderService.DisposeAsync();


}
