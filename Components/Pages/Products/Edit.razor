@* @page "/inventory/products/edit"
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Models
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Product</h2>
<hr />
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Href="/inventory/products"/>
        <MudText Typo="Typo.h4">CREATE PRODUCT</MudText>
    </div>
    <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">PRODUCT DETAILS</MudText>
            </MudItem>
            <MudItem xs="12" sm="8">
                <MudTextField @bind-Value="Product.Name" Label="Name" For="@(() => Product.Name)" Variant="Variant.Outlined"/>
                <MudTextField @bind-Value="Product.Brand" Label="Brand" For="@(() => Product.Brand)" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="Product.SKU" Label="SKU" For="@(() => Product.SKU)" Variant="Variant.Outlined" />
                <MudGrid>
                    <MudItem xs="5">
                        <MudSelect @bind-Value="Product!.Category" Label="Category" For="@(() => Product.Category)" Variant="Variant.Outlined">
                            @foreach (Category category in _categories)
                            {
                                <MudSelectItem Value="@category.CategoryId">@category.CategoryName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="5">
                        <MudNumericField  @bind-Value="Product.WeightValue" HideSpinButtons="true"  Label="Weight" For="@(() => Product.WeightValue)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="2">
                        <MudSelect @bind-Value="Product!.WeightUnit" Label="Unit" For="@(() => Product.WeightUnit)" Variant="Variant.Outlined">
                            @foreach (string unit in Units)
                            {
                                <MudSelectItem Value="@unit"/>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

            </MudItem>
            <MudItem xs="12" sm="4">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="Product.Description" Label="Description" For="@(() => Product.Description)" Variant="Variant.Outlined" Lines="5" />
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">PRICING</MudText>
            </MudItem>
            
            <MudItem xs="12" sm="6">
                <MudNumericField  @bind-Value="Product.Cost" HideSpinButtons="true" Label="Cost" For="@(() => Product.Cost)" Variant="Variant.Outlined" />
                <MudNumericField  @bind-Value="Product.Price" HideSpinButtons="true" Label="Price" For="@(() => Product.Price)" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField id="Profit" Variant="Variant.Outlined" Label="Profit" @bind-Value="Profit" Immediate="true" ReadOnly="true"/>
                <MudTextField id="Margin" Variant="Variant.Outlined" Label="Margin" @bind-Value="Margin" Immediate="true" ReadOnly="true"/>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">ATTRIBUTES</MudText>
            </MudItem>
            
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ProductAttribute.AttributeSetId" Clearable="true" Variant="Variant.Outlined">
                    @foreach (AttributeSet set in _attributesets)
                    {
                        <MudSelectItem Value="@set.AttributeSetId">@set.AttributeSetName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="6">
                @if(ProductAttribute.AttributeSetId != 0){
                    <MudText Typo="Typo.h4">@ProductAttribute.AttributeSetId</MudText>
                }
            </MudItem>

        </MudGrid>
    </EditForm>
    


</MudContainer>
}


@code {
    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    [SupplyParameterFromForm]
    private Product? Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Product ??= await context.Products.FirstOrDefaultAsync(m => m.ProductId == ProductId);

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Product!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.ProductId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

    private bool ProductExists(int productid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Products.Any(e => e.ProductId == productid);
    }
}
 *@