@page "/products/create"
@using InventiCloud.Data
@using InventiCloud.Services.Interface
@using InventiCloud.Utils
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@inject ICategoryService CategoryService
@inject IAttributeSetService AttributeSetService
@inject IBranchService BranchService
@inject IProductService ProductService
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Href="/products/list" />
        <MudText Typo="Typo.h4">CREATE PRODUCT</MudText>
    </div>
    <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">PRODUCT DETAILS</MudText>
            </MudItem>
            <MudItem xs="12" sm="8">
                <MudTextField @bind-Value="Product.ProductName" Label="Name" For="@(() => Product.ProductName)" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="Product.Brand" Label="Brand" For="@(() => Product.Brand)" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="Product.SKU" Label="SKU" For="@(() => Product.SKU)" Variant="Variant.Outlined" />
                <MudSelect Label="Category" @bind-Value="Product.CategoryId" For="@(() => Product.CategoryId)"
                Variant="Variant.Outlined">
                    <MudSelectItem T="int" Value="0" Disabled="true">Select Category</MudSelectItem>
                    @foreach (Category category in _categories)
                    {
                        <MudSelectItem Value="@category.CategoryId">@category.CategoryName</MudSelectItem>
                    }
                </MudSelect>

            </MudItem>
            <MudItem xs="12" sm="4">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="Product.Description" Label="Description" For="@(() => Product.Description)" Variant="Variant.Outlined" Lines="5" />
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">PRICING</MudText>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudNumericField  @bind-Value="Product.UnitCost" HideSpinButtons="true" Label="Cost" For="@(() => Product.UnitCost)"  Variant="Variant.Outlined" @bind-Value:after="After" />
                <MudNumericField @bind-Value="Product.UnitPrice" HideSpinButtons="true" Label="Price" For="@(() => Product.UnitCost)" Variant="Variant.Outlined" @bind-Value:after="After" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField id="Profit" Variant="Variant.Outlined" Label="Profit" @bind-Value="Profit" Immediate="true" ReadOnly="true"/>
                <MudTextField id="Margin" Variant="Variant.Outlined" Label="Margin" @bind-Value="Margin" Immediate="true" ReadOnly="true"/>
            </MudItem>

            <MudItem xs="6" sm="6">
                <MudSelect Label="ATTRIBUTES" @bind-Value="AttributeSet.AttributeSetId" For="@(() => AttributeSet.AttributeSetId)"
                           Variant="Variant.Outlined">
                    <MudSelectItem T="int" Value="0" Disabled="true">Select Attribute Set</MudSelectItem>
                    @foreach (AttributeSet attributeSet in _attributesets)
                    {
                        <MudSelectItem Value="@attributeSet.AttributeSetId">@attributeSet.AttributeSetName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            @* <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ProductAttribute.AttributeSetId" Clearable="true" Variant="Variant.Outlined">
                    @foreach (AttributeSet set in _attributesets)
                    {
                        <MudSelectItem Value="@set.AttributeSetId">@set.AttributeSetName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="6">
                @if(ProductAttribute.AttributeSetId != 0){
                    <MudText Typo="Typo.h4">@ProductAttribute.AttributeSetId</MudText>
                }
            </MudItem> *@


        </MudGrid>

        <MudItem xs="12" Class="d-flex align-md-end mt-12">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">CREATE PRODUCT</MudButton>
        </MudItem>

    </EditForm>

</MudContainer>



@code {
    #nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;


    string _searchBrand;
    private List<string?> _brands = new();



    [SupplyParameterFromForm]
    private Product Product { get; set; } = new();
    private AttributeSet AttributeSet { get; set; } = new();


    private ApplicationDbContext context = default!;

    private IEnumerable<Category> _categories = new List<Category>();
    private IEnumerable<AttributeSet> _attributesets = new List<AttributeSet>();
    private IEnumerable<Inventory> _inventories;
    private IEnumerable<Branch> _branches;

    protected override async Task OnInitializedAsync()
    {

        _categories = await CategoryService.GetAllCategoryAsync();
        _attributesets = await AttributeSetService.GetAllAttributeSetAsync();
        _branches = await BranchService.GetAllBranchAsync();

    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProduct()
    {

        await ProductService.AddProductAsync(Product);

        
        NavigationManager.NavigateTo("/products/list");
    }

    private string Profit = "--";
    private string Margin = "--";
    private decimal? _profit;
    private decimal? _margin;

    private void After()
    {

        if (Product.UnitPrice == 0)
        {
            Profit = "--";
            Margin = "--";

        }
        else
        {
            _profit = Product.UnitPrice - Product.UnitCost;
            _margin = _profit / Product.UnitPrice;

            Profit = String.Format(new System.Globalization.CultureInfo("en-PH"), "{0:C2}", _profit);
            Margin = $"{_margin:P2}"; // Displays percentage with 2 decimal places
        }

    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _brands;

        return _brands.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }
    }

    private void Upload()
    {
        // Upload the files here
        // Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        // Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
