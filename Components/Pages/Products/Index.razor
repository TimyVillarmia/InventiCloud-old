@page "/products"
@using InventiCloud.Components.UI
@using InventiCloud.Services.Interface
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Data
@implements IAsyncDisposable
@inject IProductService ProductService
@inject IInventoryService InventoryService
@inject ICategoryService CategoryService
@inject IBranchService BranchService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Products</PageTitle>

<MudText Class="bold mb-2" Typo="Typo.h4">Products</MudText>


@if (_branches == null)
{
    <MudContainer Class="d-flex justify-center align-items-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else if (!_branches.Any())
{
    <MudPaper Height="500px" Class="justify-center align-content-center">
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">No Branches Exist</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-3">
            To manage products effectively, you need at least one branches set up in your system.
        </MudText>
        <MudContainer Class="d-flex justify-center mt-2">
            <MudButton Variant="Variant.Filled" Href="/store/branches/create" Color="Color.Primary" Class="text-uppercase">
                Create New Branch
            </MudButton>
        </MudContainer>

    </MudPaper>
}
else if (_products == null)
{
    <MudContainer Class="d-flex justify-center align-items-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else if (!_products.Any())
{
    <MudPaper Height="500px" Class="d-flex flex-column justify-center align-items-center">
        <MudText Class="bold" Typo="Typo.h6" Align="Align.Center">Product Catalog</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-2">
            @if (IsAdminUser)
            {
                <span>Your product catalog is currently empty. Click the "Add Product" button to get started.</span>
            }
            else
            {
                <span>The product catalog is currently empty. The store owner hasn't added any products yet.</span>
            }
        </MudText>
        <MudContainer Class="d-flex justify-center mt-4">
            <AuthorizeView Roles="Administrator">

                <MudButton Variant="Variant.Filled"  Href="/products/create" Color="Color.Primary" Class="bold text-uppercase">

                    Add Product

                </MudButton>

            </AuthorizeView>
        </MudContainer>
    </MudPaper>
}
else
{

    <MudGrid>
        <MudItem sm="6">
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Variant="Variant.Outlined" Placeholder="Search by Name, SKU, Brand, or Category" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </MudItem>
        <MudItem sm="6" Class="d-flex justify-end">
            <AuthorizeView Roles="Administrator">
                <MudButton Variant="Variant.Filled" Href="products/create" Color="Color.Primary" Class="text-uppercase">
                    Add Product
                </MudButton>
            </AuthorizeView>
        </MudItem>

    </MudGrid>

    <MudDataGrid @ref="dataGrid" T="Product" ServerData="ServerReload" MultiSelection="true">
        <Columns>
            <PropertyColumn Property="product => product.SKU" />
            <PropertyColumn Property="product => product.ProductName" Title="Product Name" />
            <PropertyColumn Property="product => product.Category.CategoryName" Title="Category" />
            <PropertyColumn Property="product => product.Brand" Title="Brand" />
            <PropertyColumn Property="product => product.UnitPrice" Title="Price" />
            <PropertyColumn Property="product => product.UnitCost" Title="Cost" />
            @if (IsAdminUser)
            {
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                            <MudMenuItem Label="Edit" href="@($"/products/{context.Item.SKU}")" />
                            <MudMenuItem Label="Delete" Class="red-text" OnClick="@(() => OpenDialogAsync(context.Item))" />
                        </MudMenu>
                    </CellTemplate>
                </TemplateColumn>
            }



        </Columns>
        <PagerContent>
            <MudDataGridPager T="Product" />
        </PagerContent>
    </MudDataGrid>

}




@code {
    string searchString = null;
    private int selectedCategory = 0;

    private IEnumerable<Branch>? _branches;
    private IEnumerable<Product>? _products;
    private IEnumerable<Product> _filteredproducts = new List<Product>();
    private IEnumerable<Category>? _categories = new List<Category>();
    private ApplicationUser? CurrentUser { get; set; } // Replace ApplicationUser with your actual user class
    private bool IsAdminUser { get; set; }

    MudDataGrid<Product> dataGrid = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _branches = await BranchService.GetAllBranchAsync();
        _products = await ProductService.GetAllProductAsync();
        _categories = await CategoryService.GetAllCategoryAsync();

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUser = await UserManager.GetUserAsync(user);
            IsAdminUser = user.IsInRole("Administrator"); // Check if the user has the "Administrator" role
        }




    }

    private async Task<GridData<Product>> ServerReload(GridState<Product> state)
    {
        _filteredproducts = await ProductService.GetAllProductAsync(); // Start with all products

        if (selectedCategory != 0) // If not "All" category
        {
            _filteredproducts = _products.Where(p => p.CategoryId == selectedCategory);
        }

        _filteredproducts = _filteredproducts.Where(product =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (product.SKU.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (product.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (product.Brand.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (product.Category.CategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = _filteredproducts.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(Product.UnitPrice):
                    _filteredproducts = _filteredproducts.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        p => p.UnitPrice
                    );
                    break;
            }
        }

        var pagedData = _filteredproducts.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<Product>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    // events
    async Task OpenDialogAsync(Product product)
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to delete the product '{product.ProductName}'? This action cannot be undone."},
            { "Button1Text", "Delete" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Product", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ProductService.DeleteProductAsync(product);
                Snackbar.Add("Product Deleted", Severity.Success);
                await dataGrid.ReloadServerData();

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the product.", Severity.Error);
            }
        }

    }



    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private Task OnSelect()
    {
        return dataGrid.ReloadServerData();
    }


    public async ValueTask DisposeAsync() => await InventoryService.DisposeAsync();
}
