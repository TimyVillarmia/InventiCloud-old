@page "/product-setup/attributesets"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Models
@using InventiCloud.Data
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IAttributeSetService AttributeSetService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<PageTitle>Index</PageTitle>


<MudText Class="bold mb-2" Typo="Typo.h4">ATTRIBUTE SETS</MudText>
@if (_attributesets == null)
{
    <MudContainer Class="d-flex justify-center align-items-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else
{
    <MudGrid>
        <MudItem sm="6">
            <EditForm method="post" Model="attributeSet" OnValidSubmit="AddAttributeSet" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <div>
                        <MudTextField @bind-Value="attributeSet.AttributeSetName" Label="AttributeSet Name" For="@(() => attributeSet.AttributeSetName)" Variant="Variant.Outlined" />

                    </div>
                    <div>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Attribute Set</MudButton>
                    </div>
                </MudStack>
            </EditForm>
        </MudItem>
        <MudItem sm="6">
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Variant="Variant.Outlined" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </MudItem>
    </MudGrid>
    @if (!_attributesets.Any())
    {

        <MudPaper Height="500px" Class="justify-center align-content-center">
            <MudText Class="bold" Typo="Typo.h6" Align="Align.Center">No Categories Found</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center">Let's start organizing your products! Create your first Attribute Sets.</MudText>
        </MudPaper>
    }
    else
    {
        <MudDataGrid @ref="dataGrid" T="AttributeSet" ServerData="ServerReload" RowClick="@RowClicked">
            <Columns>
                <PropertyColumn Property="attributesets => attributesets.AttributeSetName" Title="AttributeSet Name" />
                <PropertyColumn Property="attributesets => attributesets.Attributes.Count()" Title="Attributes" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" OnClick="@(() => OpenDialogAsync(context.Item))" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="AttributeSet" />
            </PagerContent>
        </MudDataGrid>

    }

}

@code {
    private string _searchString;
    MudDataGrid<AttributeSet> dataGrid = new();

    [SupplyParameterFromForm]
    private AttributeSet attributeSet { get; set; } = new();
    string searchString = null;
    private IEnumerable<AttributeSet>? _attributesets;

    protected override async Task OnInitializedAsync()
    {
        // context = DbFactory.CreateDbContext();
        _attributesets = await AttributeSetService.GetAllAttributeSetAsync();
    }

    private async Task AddAttributeSet()
    {
        // await context.AttributeSet.AddAsync(attributeSet);
        await AttributeSetService.AddAttributeSet(attributeSet);

        attributeSet = new();
        await dataGrid.ReloadServerData();
    }

    async Task OpenDialogAsync(AttributeSet attributesets)
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to delete the category '{attributesets.AttributeSetName}'? This action cannot be undone."}
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete AttributeSet Name", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await AttributeSetService.DeleteAttributeSet(attributesets);
                Snackbar.Add("AttributeSet Name Deleted", Severity.Success);
                await dataGrid.ReloadServerData();

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the category.", Severity.Error);
            }
        }

    }

    void RowClicked(DataGridRowClickEventArgs<AttributeSet> args)
    {


        if (args.Item == null)
        {
            return;
        }

        NavigationManager.NavigateTo($"/product-management/attributesets/{args.Item.AttributeSetName}");

    }

    private async Task<GridData<AttributeSet>> ServerReload(GridState<AttributeSet> state)
    {
        _attributesets = await AttributeSetService.GetAllAttributeSetAsync();
        await Task.Delay(300);
        _attributesets = _attributesets.Where(attributesets =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (attributesets.AttributeSetName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = _attributesets.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(AttributeSet.AttributeSetName):
                    _attributesets = _attributesets.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.AttributeSetName
                    );
                    break;
            }
        }


        var pagedData = _attributesets.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<AttributeSet>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }


    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }
}