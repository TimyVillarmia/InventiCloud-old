@page "/inventory/stock-transfers/requests/{ReferenceNumber}"
@using InventiCloud.Components.UI
@using InventiCloud.Data
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using InventiCloud.Entities
@using System.ComponentModel.DataAnnotations
@inject IBranchService BranchService
@inject IStockTransferService StockTransferService
@inject IProductService ProductService
@inject IInventoryService InventoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize]

<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">

    <div class="d-flex align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="HandleNavigation" />
        <MudText Typo="Typo.h4">@ReferenceNumber</MudText>
        <MudChip T="string" Color="@SelectedColor">@Status</MudChip>
    </div>

    <MudText Typo="Typo.h6">DETAILS</MudText>
    <MudGrid>

        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Source Branch" @bind-Value="StockTransfer.SourceBranch.BranchName" ReadOnly="true"
            Variant="Variant.Outlined" />
            <MudTextField T="string" Label="Stock Transfer Number" @bind-Value="StockTransfer.ReferenceNumber" ReadOnly="true" Variant="Variant.Outlined" />
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Destination Branch" @bind-Value="StockTransfer.DestinationBranch.BranchName"
            ReadOnly="true" Variant="Variant.Outlined" />
            <MudDatePicker Label="Requested Date" Editable="true" @bind-Date="StockTransfer.RequestedDate" ReadOnly="true"
            Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Requested Date" Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">PRODUCTS</MudText>
            <MudDataGrid  @ref="dataGrid" T="StockTransferItemViewModel" ServerData="ServerReload" Class="mt-4">
                <Columns>
                    <PropertyColumn Property="sti => sti.Product.ProductName" Title="Product" />
                                            <PropertyColumn Property="sti => sti.AvailableQuantity" Title="Available Quantity" />
                    <PropertyColumn Property="sti => sti.TransferQuantity" Title="Transfer Quantity" />
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="StockTransferItemViewModel" />
                </PagerContent>
            </MudDataGrid>

        </MudItem>
        <MudItem xs="12" Class="d-flex align-md-end">

            @if (IsAdminUser)
            {
                @if (Status.ToLower() == "requested")
                {
                    <MudButton OnClick="DeleteStockTransfer" Variant="Variant.Outlined" Color="Color.Error" Class="ml-auto">DELETE</MudButton>
                    <MudButton OnClick="RejectStockTransfer" Variant="Variant.Filled" Color="Color.Error" Class="ml-2">REJECT</MudButton>
                    <MudButton OnClick="ApproveStockTransfer" Variant="Variant.Filled" Color="Color.Info" Class="ml-2">APPROVE</MudButton>
                }
                else if (Status.ToLower() == "approved")
                {
                    <MudButton OnClick="CompleteStockTransfer" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">COMPLETE</MudButton>
                }
            }
            else
            {
                @if (Status.ToLower() == "requested")
                {
                    <MudButton OnClick="DeleteStockTransfer" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto">DELETE</MudButton>
                }
            }
        </MudItem>

    </MudGrid>




</MudContainer>




@code {
    MudDataGrid<StockTransferItemViewModel> dataGrid = new();


    [Parameter]
    public string ReferenceNumber { get; set; }


    private StockTransferDetailViewModel StockTransfer { get; set; } = new();

    private List<StockTransferItemViewModel> StockTransferItems = new List<StockTransferItemViewModel>();
    private List<StockTransferItem> data_sti = new List<StockTransferItem>();

    private IEnumerable<Inventory>? _sourceBranchInventories;

    // conditions
    private string? Status = "Requested";
    public Color SelectedColor;
    public bool isRequested = true;
    private bool IsAdminUser { get; set; }

    public class StockTransferDetailViewModel
    {
        public string ReferenceNumber { get; set; }
        public Branch SourceBranch { get; set; } = new();
        public Branch DestinationBranch { get; set; } = new();
        public string? ApproverUserName { get; set; }
        public string? RequesterUserName { get; set; }
        public DateTime? RequestedDate { get; set; }
        public DateTime? DateApproved { get; set; }
        public DateTime? DateCompleted { get; set; }
    }


    public class StockTransferItemViewModel : IValidatableObject
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Product is required.")]
        public Product Product { get; set; } = new();

        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be greater than 0.")]
        [Required(ErrorMessage = "Quantity is required.")]
        public int TransferQuantity { get; set; }

        public int AvailableQuantity { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (AvailableQuantity == 0 && TransferQuantity > 0)
            {
                yield return new ValidationResult("Available quantity is zero. Cannot transfer.", new[] { nameof(TransferQuantity) });
            }

            if (TransferQuantity > AvailableQuantity)
            {
                yield return new ValidationResult("Transfer quantity exceeds available quantity.", new[] { nameof(TransferQuantity) });
            }
        }
    }

    private ApplicationUser? CurrentUser { get; set; } // Replace ApplicationUser with your actual user class


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var data = await StockTransferService.GetStockTransferByReferenceNumberAsync(ReferenceNumber);

        if (user.Identity?.IsAuthenticated == true)
        {
            IsAdminUser = user.IsInRole("Administrator"); // Check if the user has the "Administrator" role
        }
        if (data is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        StockTransfer = new StockTransferDetailViewModel
            {
                ReferenceNumber = data.ReferenceNumber,
                SourceBranch = data.SourceBranch,
                DestinationBranch = data.DestinationBranch,
                ApproverUserName = data.ApprovedBy?.UserName,
                RequesterUserName = data.RequestedBy?.UserName,
                RequestedDate = data.RequestedDate,
                DateApproved = data.DateApproved,
                DateCompleted = data.DateCompleted,
            };

        data_sti = data.StockTransferItems.ToList();



        if (data_sti != null)
        {
            await LoadData();

        }
        else
        {
            StockTransferItems = new List<StockTransferItemViewModel>();
            Console.WriteLine($"Warning: StockTransferItems is null for StockTransfer with ReferenceNumber: {ReferenceNumber}");
        }

        CurrentUser = await UserManager.GetUserAsync(user);
        if (CurrentUser is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        Status = data.Status.StatusName; // Use the Status property from the ViewModel


        switch (Status.ToLower()) // Use ToLower() for case-insensitive comparison
        {
            case "requested":
                SelectedColor = Color.Warning;
                isRequested = true;
                break;
            case "approved":
                SelectedColor = Color.Info;
                isRequested = false;
                break;
            case "rejected":
                SelectedColor = Color.Error;
                isRequested = false;
                break;
            case "completed":
                SelectedColor = Color.Success;
                isRequested = false;
                break;
            default:
                SelectedColor = Color.Default; // Or some other default color
                break;
        }

    }

    private async Task LoadData()
    {
        _sourceBranchInventories = await InventoryService.GetAllInventoryByBranchAsync(StockTransfer.SourceBranch.BranchId);

        StockTransferItems = data_sti.Select(vm => new StockTransferItemViewModel
            {
                Id = vm.StockTransferItemlId,
                Product = vm.Product,
                TransferQuantity = vm.TransferQuantity,
                AvailableQuantity = _sourceBranchInventories.First(i => i.ProductId == vm.ProductId && i.BranchId == StockTransfer.SourceBranch.BranchId).AvailableQuantity,
            }).ToList();
    }

    private async Task<GridData<StockTransferItemViewModel>> ServerReload(GridState<StockTransferItemViewModel> state)
    {

        await LoadData();

        var totalItems = StockTransferItems.Count();

        var pagedData = StockTransferItems.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<StockTransferItemViewModel>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }


    private async Task DeleteStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Are you sure you want to delete the Stock Transfer '{StockTransfer.ReferenceNumber}'? This action cannot be undone." },
            { "Button1Text", "Delete" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // delete from db
                await StockTransferService.DeleteStockTransferAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers/requests");
                Snackbar.Add($"Stock Transfer '{StockTransfer.ReferenceNumber}' Deleted", Severity.Success);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the Stock Transfer.", Severity.Error);
            }
        }
    }


    private async Task ApproveStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Approving Stock Transfer '{StockTransfer.ReferenceNumber}' will allocate the specified quantities in the source branch. Are you sure you want to proceed?" },
            { "Button1Text", "Approve" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Info }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Approve Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // ensure the latest changes
             
                await dataGrid.ReloadServerData();
                await StockTransferService.StockTransferToApprovedAsync(ReferenceNumber);
                Snackbar.Add($"Stock Transfer '{StockTransfer.ReferenceNumber}' Approved", Severity.Success);
                NavigationManager.NavigateTo($"/inventory/stock-transfers/requests/{ReferenceNumber}", true);

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while approving the Stock Transfer.", Severity.Error);
            }
        }
    }


    private async Task RejectStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Are you sure you want to reject Stock Transfer '{StockTransfer.ReferenceNumber}'? This action cannot be undone." },
            { "Button1Text", "Reject" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Reject Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await StockTransferService.StockTransferToRejectedAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers/requests/{ReferenceNumber}", true);
                Snackbar.Add($"Stock Transfer '{StockTransfer.ReferenceNumber}' Rejected.", Severity.Warning);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while rejecting the Stock Transfer.", Severity.Error);
            }
        }
    }

    private async Task CompleteStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Completing Stock Transfer '{StockTransfer.ReferenceNumber}' will finalize the transfer and update inventory in both the source and destination branches. Are you sure you want to proceed?" },
            { "Button1Text", "Complete Transfer" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Success }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Complete Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await dataGrid.ReloadServerData();
                await StockTransferService.StockTransferToCompletedAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers/requests/{ReferenceNumber}", true);
                Snackbar.Add($"Stock Transfer '{StockTransfer.ReferenceNumber}' Completed.", Severity.Success);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while completing the Stock Transfer.", Severity.Error);
            }
        }
    }

    private void HandleNavigation()
    {
        if (IsAdminUser)
        {
            NavigationManager.NavigateTo("/inventory/stock-transfers/all", true);
        }
        else
        {
            NavigationManager.NavigateTo("/inventory/stock-transfers/requests", true);

        }
    }


   
}