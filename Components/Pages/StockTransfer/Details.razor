@page "/inventory/stock-transfers/requested/{ReferenceNumber}"
@page "/inventory/stock-transfers/approvals/{ReferenceNumber}"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using InventiCloud.Entities
@using System.ComponentModel.DataAnnotations
@inject IBranchService BranchService
@inject IStockTransferService StockTransferService
@inject IProductService ProductService
@inject IInventoryService InventoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">

    <div class="d-flex align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Href="/inventory/stock-transfers/approvals" />
        <MudText Typo="Typo.h4">@ReferenceNumber</MudText>
        <MudChip T="string" Color="@SelectedColor">@(Status == "requested" ? "Awaiting for approval" : Status)</MudChip>
    </div>

    <MudText Typo="Typo.h6">DETAILS</MudText>
    <MudGrid>

        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Source Branch" @bind-Value="StockTransfer.SourceBranch.BranchName" ReadOnly="true"
            Variant="Variant.Outlined" />
            <MudTextField T="string" Class="mb-4" Label="Approved By" @bind-Value="StockTransfer.ApprovedBy.UserName" ReadOnly="true" Variant="Variant.Outlined" />

        </MudItem>

        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Destination Branch" @bind-Value="StockTransfer.DestinationBranch.BranchName"
            ReadOnly="true" Variant="Variant.Outlined" />
            <MudDatePicker Label="Requested Date" Editable="true" @bind-Date="StockTransfer.RequestedDate" ReadOnly="true"
            Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Requested Date" Variant="Variant.Outlined" />
        </MudItem>
        @if (!isRequested)
        {
            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Approved Date" Editable="true" @bind-Date="StockTransfer.DateApproved" ReadOnly="true"
                Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Requested Date" Variant="Variant.Outlined" />
                <MudDatePicker Label="Completed Date" Editable="true" @bind-Date="StockTransfer.DateCompleted" ReadOnly="true"
                Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Requested Date" Variant="Variant.Outlined" />
            </MudItem>
        }



    </MudGrid>

    <MudText Typo="Typo.h6">PRODUCTS</MudText>
    <MudDataGrid Items="StockTransferItems" Class="mt-4">
        <Columns>
            <PropertyColumn Property="sti => sti.Product.ProductName" Title="Product" />
            @if (isRequested)
            {
                <PropertyColumn Property="sti => sti.AvailableQuantity" Title="Available Quantity" />

            }
            <PropertyColumn Property="sti => sti.TransferQuantity" Title="Transfer Quantity" />
        </Columns>
    </MudDataGrid>
    <div class="d-flex align-end mt-12">
        @if (IsRequestedDetailsPage)
        {
            <MudButton OnClick="DeleteStockTransfer" Variant="Variant.Outlined" Color="Color.Error">Delete</MudButton>
        }
        @if (Status.ToLower() == "requested")
        {
            <MudButton OnClick="RejectStockTransfer" Variant="Variant.Outlined" Color="Color.Error">Reject</MudButton>
            <MudButton OnClick="ApproveStockTransfer" Variant="Variant.Outlined" Color="Color.Error">Approved</MudButton>
        }
        else if (Status.ToLower() == "approved")
        {
            <MudButton OnClick="CompleteStockTransfer" Variant="Variant.Outlined" Color="Color.Error">Complete</MudButton>
        }
    </div>

</MudContainer>




@code {
    MudDataGrid<StockTransfer> dataGrid = new();


    [Parameter]
    public string ReferenceNumber { get; set; }


    private StockTransfer StockTransfer { get; set; } = new();

    private List<StockTransferItemViewModel> StockTransferItems = new List<StockTransferItemViewModel>();

    private IEnumerable<Branch>? _branches;
    private IEnumerable<Inventory>? _sourceBranchInventories;

    // conditions
    private string? Status = "Draft";
    public Color SelectedColor;
    public bool isRequested = true;
    private bool IsRequestedDetailsPage = false; // Flag to track the current page






    public class StockTransferItemViewModel : IValidatableObject
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Product is required.")]
        public Product Product { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be greater than 0.")]
        [Required(ErrorMessage = "Quantity is required.")]
        public int TransferQuantity { get; set; }

        public int AvailableQuantity { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (AvailableQuantity == 0 && TransferQuantity > 0)
            {
                yield return new ValidationResult("Available quantity is zero. Cannot transfer.", new[] { nameof(TransferQuantity) });
            }

            if (TransferQuantity > AvailableQuantity)
            {
                yield return new ValidationResult("Transfer quantity exceeds available quantity.", new[] { nameof(TransferQuantity) });
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _branches = await BranchService.GetAllBranchAsync();

        var data = await StockTransferService.GetStockTransferByReferenceNumberAsync(ReferenceNumber);


        if (data is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        StockTransfer = data;

        // Determine if it's the /requested details page
        IsRequestedDetailsPage = NavigationManager.Uri.ToLowerInvariant().StartsWith($"{NavigationManager.BaseUri}inventory/stock-transfers/requested/{ReferenceNumber?.ToLowerInvariant()}");


        Status = data.Status.StatusName;
        _sourceBranchInventories = await InventoryService.GetAllInventoryByBranchAsync(data.SourceBranch.BranchId);



        var items = data.StockTransferItems.ToList();


        StockTransferItems = items.Select(vm => new StockTransferItemViewModel
            {
                Id = vm.StockTransferItemlId,
                Product = vm.Product,
                TransferQuantity = vm.TransferQuantity,
                AvailableQuantity = _sourceBranchInventories
                                               .FirstOrDefault(i => i.Product.ProductId == vm.Product.ProductId)?.AvailableQuantity ?? 0 // Use vm.Product.ProductId and handle null
            }).ToList();

        switch (Status.ToLower()) // Use ToLower() for case-insensitive comparison
        {
            case "requested":
                SelectedColor = Color.Default;
                isRequested = true;
                break;
            case "approved":
                SelectedColor = Color.Info;
                isRequested = false;
                break;
            case "rejected":
                SelectedColor = Color.Error;
                isRequested = false;
                break;
            case "completed":
                SelectedColor = Color.Success;
                isRequested = false;
                break;
            default:
                SelectedColor = Color.Default; // Or some other default color
                break;
        }

    }






    private async Task DeleteStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Are you sure you want to delete the Stock Transfer '{StockTransfer.ReferenceNumber}'? This action cannot be undone." },
            { "Button1Text", "Delete" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // delete from db
                await StockTransferService.DeleteStockTransferAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers");
                Snackbar.Add("Stock Transfer Deleted", Severity.Success);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the Stock Transfer.", Severity.Error);
            }
        }
    }


    private async Task ApproveStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Approving Stock Transfer '{StockTransfer.ReferenceNumber}' will allocate the specified quantities in the source branch. Are you sure you want to proceed?" },
            { "Button1Text", "Approve" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Info }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Approve Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await StockTransferService.StockTransferToApprovedAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers/{ReferenceNumber}", true);
                Snackbar.Add($"Stock Transfer '{StockTransfer.ReferenceNumber}' Approved", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred during approval: {ex.Message}", Severity.Error);
            }
        }
    }


    private async Task RejectStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Are you sure you want to reject Stock Transfer '{StockTransfer.ReferenceNumber}'? This action cannot be undone." },
            { "Button1Text", "Reject" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Reject Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await StockTransferService.StockTransferToRejectedAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers/{ReferenceNumber}", true);
                Snackbar.Add($"Stock Transfer '{StockTransfer.ReferenceNumber}' Rejected.", Severity.Warning);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred during rejection: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task CompleteStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, $"Completing Stock Transfer '{StockTransfer.ReferenceNumber}' will finalize the transfer and update inventory in both the source and destination branches. Are you sure you want to proceed?" },
            { "Button1Text", "Complete Transfer" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Success }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Complete Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await StockTransferService.StockTransferToCompletedAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers/{ReferenceNumber}", true);
                Snackbar.Add($"Stock Transfer '{StockTransfer.ReferenceNumber}' Completed. Inventory updated in both branches.", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred during completion: {ex.Message}", Severity.Error);
            }
        }
    }
}