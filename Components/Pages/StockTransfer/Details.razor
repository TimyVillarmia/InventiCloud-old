@page "/inventory/stock-transfers/{ReferenceNumber}"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using InventiCloud.Entities
@using System.ComponentModel.DataAnnotations
@inject IBranchService BranchService
@inject IStockTransferService StockTransferService
@inject IProductService ProductService
@inject IInventoryService InventoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">

    <div class="d-flex align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Href="/inventory/stock-transfers" />
        <MudText Typo="Typo.h4">@ReferenceNumber</MudText>
        <MudChip T="string" Color="@SelectedColor">@Status</MudChip>
    </div>

    <EditForm method="post" Model="@StockTransfer" Context="StockTransferForm" FormName="updateStockTransfer" Enhance>
        <DataAnnotationsValidator />
        <MudText Typo="Typo.h6">DETAILS</MudText>
        <MudGrid>

            <MudItem xs="12" sm="6">
                <MudAutocomplete T="Branch" Label="Source Branch" @bind-Value="StockTransfer.SourceBranch" For="@(()=> StockTransfer.SourceBranch)" Disabled="@( isAllocated && isEmpty ? true : false)"
                SearchFunc="@SearchBranch" ToStringFunc="@(branch=> branch==null?null : $"{branch.BranchName}")" Variant="Variant.Outlined" @bind-Value:after="HandleChangeSourceBranch" />
                <MudTextField T="string" Class="mb-4" Label="Purchase Order Number" @bind-Value="StockTransfer.ReferenceNumber" ReadOnly="true" Disabled="true" Variant="Variant.Outlined" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudAutocomplete T="Branch" Label="Destination Branch" @bind-Value="StockTransfer.DestinationBranch" Disabled="@( isAllocated && isEmpty ? true : false)"
                SearchFunc="@SearchBranch" ToStringFunc="@(branch=> branch==null?null : $"{branch.BranchName}")" For="@(() => StockTransfer.DestinationBranch)" Variant="Variant.Outlined" />
                <MudDatePicker Label="Date Created" Editable="true" @bind-Date="StockTransfer.DateCreated" ReadOnly="true"
                Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Date Created" Variant="Variant.Outlined" />
            </MudItem>


        </MudGrid>

        <EditForm method="post" Model="@StockTransferItem" Context="StockTransferItemForm" OnValidSubmit="@AddStockTransferItem" FormName="updateStockTransferItem" Enhance>
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h6">PRODUCTS</MudText>
            <MudGrid>
                <MudItem sm="12">
                    <MudGrid Class="d-flex align-center flex-wrap flex-grow-1">
                        <MudItem xs="12" sm="5">
                            <MudAutocomplete T="Product" Label="Products" @bind-Value="StockTransferItem.Product" For="@(() => StockTransferItem.Product)"
                            SearchFunc="@SearchProduct" ToStringFunc="@(product=> product==null?null : $"{product.ProductName}")" Variant="Variant.Outlined" @bind-Value:after="After" />
                        </MudItem>

                        <MudItem xs="12" sm="3">
                            <MudNumericField HideSpinButtons="true" T="int" Variant="Variant.Outlined" ReadOnly="true" Label="Available Quantity" For="@(() => StockTransferItem.AvailableQuantity)"
                            @bind-Value="StockTransferItem.AvailableQuantity" />
                        </MudItem>

                        <MudItem xs="12" sm="3">
                            <MudNumericField HideSpinButtons="true" T="int" Variant="Variant.Outlined" Label="Transfer Quantity" For="@(() => StockTransferItem.TransferQuantity)"
                            @bind-Value="StockTransferItem.TransferQuantity" />
                        </MudItem>


                        <MudItem xs="6" sm="1">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                        </MudItem>
                    </MudGrid>

                </MudItem>
            </MudGrid>

        </EditForm>

        <MudDataGrid Items="StockTransferItems" Class="mt-4">
            <Columns>
                <PropertyColumn Property="sti => sti.Product.ProductName" Title="Product" />
                @if (isAllocated)
                {
                    <PropertyColumn Property="sti => sti.AvailableQuantity" Title="Available Quantity" />

                }
                <PropertyColumn Property="sti => sti.TransferQuantity" Title="Transfer Quantity" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" aria-label="delete" OnClick="@(() => RemoveStockTransferItem(context.Item))" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <div class="d-flex align-end mt-12">
            @if (Status.ToLower() == "allocated")
            {
                <MudButton OnClick="DeleteStockTransfer" Variant="Variant.Outlined" Color="Color.Error">DELETE</MudButton>
                <MudButton OnClick="MarkAsTransit" Variant="Variant.Outlined" Color="Color.Info">MARK AS IN TRANSIT</MudButton>
                <MudButton  OnClick="SaveChanges" Variant="Variant.Filled" Color="Color.Primary">SAVE CHANGES</MudButton>
            }
            else if (Status.ToLower() == "in transit")
            {
                <MudButton OnClick="CancelTransfer" Variant="Variant.Outlined" Color="Color.Error">CANCEL TRANSFER</MudButton>
                <MudButton OnClick="CompleteTransfer" Variant="Variant.Filled" Color="Color.Success">COMPLETE TRANSFER</MudButton>
            }

        </div>

    </EditForm>

</MudContainer>




@code {
    MudDataGrid<StockTransfer> dataGrid = new();


    [Parameter]
    public string ReferenceNumber { get; set; }


    [SupplyParameterFromForm(FormName = "updateStockTransfer")]
    private StockTransferViewModel StockTransfer { get; set; } = new();

    [SupplyParameterFromForm(FormName = "updateStockTransferItem")]
    private StockTransferItemViewModel StockTransferItem { get; set; } = new();

    private List<StockTransferItemViewModel> StockTransferItems = new List<StockTransferItemViewModel>();

    private IEnumerable<Branch>? _branches;
    private IEnumerable<Inventory>? _sourceBranchInventories;

    // conditions
    private string? Status = "Draft";
    public Color SelectedColor;
    public bool isAllocated = true;
    public bool isEmpty = true;




    class StockTransferViewModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Source Branch is required.")]
        public Branch SourceBranch { get; set; } = new();


        [Required(ErrorMessage = "Destination Branch is required.")]
        public Branch DestinationBranch { get; set; } = new();

        public string? ReferenceNumber { get; set; }

        public DateTime? DateCreated { get; set; }

    }

    public class StockTransferItemViewModel : IValidatableObject
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Product is required.")]
        public Product Product { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be greater than 0.")]
        [Required(ErrorMessage = "Quantity is required.")]
        public int TransferQuantity { get; set; }

        public int AvailableQuantity { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (AvailableQuantity == 0 && TransferQuantity > 0)
            {
                yield return new ValidationResult("Available quantity is zero. Cannot transfer.", new[] { nameof(TransferQuantity) });
            }

            if (TransferQuantity > AvailableQuantity)
            {
                yield return new ValidationResult("Transfer quantity exceeds available quantity.", new[] { nameof(TransferQuantity) });
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _branches = await BranchService.GetAllBranchAsync();

        var data = await StockTransferService.GetStockTransferByReferenceNumberAsync(ReferenceNumber);


        if (data is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Status = data.Status.StatusName;
        _sourceBranchInventories = await InventoryService.GetAllInventoryByBranchAsync(data.SourceBranch.BranchId);

        // map data
        StockTransfer.Id = data.StockTransferId;
        StockTransfer.SourceBranch = data.SourceBranch;
        StockTransfer.DestinationBranch = data.DestinationBranch;
        StockTransfer.ReferenceNumber = data.ReferenceNumber;
        StockTransfer.DateCreated = data.DateCreated;

        var items = data.StockTransferItems.ToList();

        StockTransferItems = items.Select(vm => new StockTransferItemViewModel
            {
                Id = vm.StockTransferItemlId,
                Product = vm.Product,
                TransferQuantity = vm.TransferQuantity,
                AvailableQuantity = _sourceBranchInventories
             .FirstOrDefault(i => i.Product.ProductId == vm.Product.ProductId)?.OnHandquantity ?? 0 // Use vm.Product.ProductId and handle null
            }).ToList();

        switch (Status.ToLower()) // Use ToLower() for case-insensitive comparison
        {
            case "allocated":
                SelectedColor = Color.Default;
                isAllocated = true;
                break;
            case "in transit":
                SelectedColor = Color.Info;
                isAllocated = false;
                break;
            case "cancelled":
                SelectedColor = Color.Error;
                break;
            case "completed":
                SelectedColor = Color.Success;
                isAllocated = false;
                break;
            default:
                SelectedColor = Color.Default; // Or some other default color
                break;
        }

        // source and destination is only editable when
        // StockTransferItems is empty
        isEmpty = StockTransferItems.Any();
    }

    

    private async Task<IEnumerable<Product>> SearchProduct(string value, CancellationToken token)
    {

        if (StockTransfer.SourceBranch == null)
        {
            return new List<Product>();
        }


        // Filter inventories based on the source branch
        _sourceBranchInventories = await InventoryService.GetAllInventoryByBranchAsync(StockTransfer.SourceBranch.BranchId);


        if (string.IsNullOrEmpty(value))
        {
            // Return all available products from the source branch, excluding already added ones.
            return _sourceBranchInventories
                .Where(p => !StockTransferItems.Any(poi => poi.Product.ProductId == p.Product.ProductId))
                .Select(i => i.Product);
        }

        // Filter products based on search value and exclude already added ones, from the source branch.
        return _sourceBranchInventories
            .Where(p => p.Product.ProductName.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
                        p.Product.SKU.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Where(p => !StockTransferItems.Any(poi => poi.Product.ProductId == p.Product.ProductId))
            .Select(i => i.Product);
    }

    private async Task<IEnumerable<Branch>> SearchBranch(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _branches
                .Where(b => b.BranchName != StockTransfer.SourceBranch.BranchName && b.BranchName != StockTransfer.DestinationBranch.BranchName);
        }

        return _branches
            .Where(b => b.BranchName.Contains(value, StringComparison.InvariantCultureIgnoreCase) &&
                        b.BranchName != StockTransfer.SourceBranch.BranchName &&
                        b.BranchName != StockTransfer.DestinationBranch.BranchName);
    }

    // events


    private void After()
    {
        StockTransferItem.AvailableQuantity = _sourceBranchInventories.Where(i => i.Product.ProductId == StockTransferItem.Product.ProductId)
                                                          .First().OnHandquantity;

    }


    private async void HandleChangeSourceBranch()
    {
        _sourceBranchInventories = await InventoryService.GetAllInventoryByBranchAsync(StockTransfer.SourceBranch.BranchId);
        StockTransferItem = new();

    }

    void RemoveStockTransferItem(StockTransferItemViewModel item)
    {


        try
        {

            // delete from view model collections
            StockTransferItems.Remove(item);
            isEmpty = StockTransferItems.Any();
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }


    }

    private void AddStockTransferItem(EditContext context)
    {


        if (context.Validate())
        {

            // delete from view model collections
            StockTransferItems.Add(StockTransferItem);
            StockTransferItem = new(); // Reset

            isEmpty = StockTransferItems.Any();
        }




    }



    private async Task DeleteStockTransfer()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to delete the Stock Transfer '{StockTransfer.ReferenceNumber}'? This action cannot be undone."},
            { "Button1Text", "Delete" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // delete from db
                await StockTransferService.DeleteStockTransferAsync(ReferenceNumber);
                NavigationManager.NavigateTo($"/inventory/stock-transfers");
                Snackbar.Add("Stock Transfer Deleted", Severity.Success);

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the Stock Transfer.", Severity.Error);
            }
        }
    }
    private async Task MarkAsTransit()
    {
        throw new NotImplementedException();
    }

    private async Task SaveChanges()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to update the Stock Transfer '{ReferenceNumber}'?"},
            { "Button1Text", "Update" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Warning } 
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Update Stock Transfer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // update stock transfer from db
                await StockTransferService.UpdateStockTransferAsync(ReferenceNumber, new StockTransfer
                    {
                        StockTransferId = StockTransfer.Id,
                        ReferenceNumber = StockTransfer.ReferenceNumber,
                        SourceBranchId = StockTransfer.SourceBranch.BranchId,
                        DestinationBranchId = StockTransfer.DestinationBranch.BranchId,

                    });

                // update stock transfer items from db
                await StockTransferService.UpdateStockTransferItemsAsync(
                    ReferenceNumber,
                    StockTransferItems.Select(vm => new StockTransferItem
                        {
                            ProductId = vm.Product.ProductId,
                            TransferQuantity = vm.TransferQuantity,
                        }).ToList()
                );


                Snackbar.Add("Stock Transfer Updated", Severity.Success);

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while updating the Stock Transfer.", Severity.Error);
            }
        }
    }
    private async Task CancelTransfer()
    {
        throw new NotImplementedException();
    }
    private async Task CompleteTransfer()
    {
        throw new NotImplementedException();
    }
}
