@page "/sales/orders/create"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Data
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IInventoryService InventoryService
@inject IBranchService BranchService
@inject ICustomerService CustomerService
@inject IProductService ProductService
@inject ISalesOrderService SalesOrderService
@inject ISalesPersonService SalesPersonService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
<MudContainer Class="pt-5" MaxWidth="MaxWidth.Large">

    <div class="d-flex align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Href="/sales/orders" />
        <MudText Typo="Typo.h4">CREATE SALES ORDERS</MudText>
    </div>

    <EditForm method="post" Model="@SalesOrder" Context="SalesOrderForm" OnValidSubmit="@AddSalesOrder" FormName="createSalesOrder" Enhance>
        <DataAnnotationsValidator/>
        <MudText Typo="Typo.h6">DETAILS</MudText>
        <MudGrid>

            <MudItem xs="12" sm="6">
                <MudAutocomplete T="Customer" Label="Customer" @bind-Value="SalesOrder.Customer" For="@(()=> SalesOrder.Customer)"
                                 SearchFunc="@SearchCustomer" ToStringFunc="@(customer=> customer==null?null : $"{customer.CustomerName}")" Variant="Variant.Outlined" />
                <MudAutocomplete T="Branch" Label="Branch" @bind-Value="SalesOrder.OrderBranch" Disabled="@autoFill" ReadOnly="@(!isEmpty)" @bind-Value:after="HandleChangeSourceBranch"
                                 SearchFunc="@SearchBranch" ToStringFunc="@(branch=> branch==null?null : $"{branch.BranchName}")" For="@(() => SalesOrder.OrderBranch)" Variant="Variant.Outlined" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudAutocomplete T="SalesPerson" Label="Sales Person" @bind-Value="SalesOrder.SalesPerson"
                                 SearchFunc="@SearchSalesPerson" ToStringFunc="@(salesperson=> salesperson==null?null : $"{salesperson.FullName}")" For="@(() => SalesOrder.SalesPerson)" Variant="Variant.Outlined" />
                <MudDatePicker Label="Order Date" Editable="true" @bind-Date="SalesOrder.OrderedDate"
                               Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Order Date" Variant="Variant.Outlined" />
            </MudItem>


        </MudGrid>

        <EditForm method="post" Model="@SalesOrderItem" Context="PurchaseOrderItemForm" OnValidSubmit="@AddBatchSalesOrderItem" OnInvalidSubmit="HandleInvalidSubmit" FormName="createSalesOrderItem" Enhance>
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h6">PRODUCTS</MudText>
            <MudGrid>
                <MudItem sm="12">
                    <MudGrid Class="d-flex align-center flex-wrap flex-grow-1">
                        <MudItem xs="12" sm="3">
                            <MudAutocomplete T="Product" Label="Products" @bind-Value="SalesOrderItem.Product" For="@(() => SalesOrderItem.Product)" Margin="Margin.Dense"
                                             SearchFunc="@SearchProduct" ToStringFunc="@(product=> product==null?null : $"{product.ProductName}")" Variant="Variant.Outlined" @bind-Value:after="After" />
                        </MudItem>

                        <MudItem xs="12" sm="2">
                            <MudNumericField HideSpinButtons="true" T="int" Variant="Variant.Outlined" ReadOnly="true" Label="Available" For="@(() => SalesOrderItem.Available)"
                                             @bind-Value="SalesOrderItem.Available" Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12" sm="2">
                            <MudNumericField HideSpinButtons="true" T="decimal" Variant="Variant.Outlined" Label="Price" For="@(() => SalesOrderItem.UnitPrice)"
                                             @bind-Value="SalesOrderItem.UnitPrice" Margin="Margin.Dense" />
                        </MudItem>


                        <MudItem xs="12" sm="2">
                            <MudNumericField HideSpinButtons="true" T="int" Variant="Variant.Outlined" For="@(() => SalesOrderItem.Quantity)"
                                                                    @bind-Value="SalesOrderItem.Quantity" Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12" sm="2">
                            <MudNumericField HideSpinButtons="true" T="int" Variant="Variant.Outlined" Label="Discount (%)"
                                                                    @bind-Value="_discountInput" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="6" sm="1">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                        </MudItem>
                    </MudGrid>

                </MudItem>
            </MudGrid>

        </EditForm>

        <MudDataGrid Items="SalesOrderItems" Class="mt-4">
            <Columns>
                <PropertyColumn Property="soi => soi.Product.ProductName" Title="Product" />
                <PropertyColumn Property="soi => soi.Discount" Title="Discount " Format="P2" />
                <PropertyColumn Property="soi => soi.Quantity" Title="Quantity" />
                <PropertyColumn Property="soi => soi.UnitPrice" Title="Price" Format="C" />
                <PropertyColumn Property="soi => soi.SubTotal" Title="Subtotal" Format="C" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" aria-label="delete" OnClick="@(() => RemoveBatchProduct(context.Item))" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudText Typo="Typo.h5" Class="mt-2">@SalesOrderItems.Sum(item => item.SubTotal).ToString("C")</MudText>



        <div class="d-flex align-end mt-12">
            <MudButton Variant="Variant.Filled" Color="Color.Default" Href="/purchase/orders" Class="ml-auto">CANCEL</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2">CREATE SALES ORDER</MudButton>

        </div>

    </EditForm>

</MudContainer>

@code {
    MudDataGrid<SalesOrderItem> dataGrid = new();

    [SupplyParameterFromForm(FormName = "createSalesOrder")]
    private SalesOrderViewModel SalesOrder { get; set; } = new();

    [SupplyParameterFromForm(FormName = "createSalesOrderItem")]
    private SalesOrderItemViewModel SalesOrderItem { get; set; } = new();
    private int _discountInput;


    private List<SalesOrderItemViewModel> SalesOrderItems = new List<SalesOrderItemViewModel>();

    private IEnumerable<Customer>? _customer;
    private IEnumerable<Branch>? _branches;
    private IEnumerable<SalesPerson>? _salesperson;
    private IEnumerable<Inventory>? _sourceBranchInventories;

    class SalesOrderViewModel
    {
        [Required(ErrorMessage = "Customer is required.")]
        public Customer Customer { get; set; }

        [Required(ErrorMessage = "Branch Name is required.")]
        public Branch OrderBranch { get; set; }

        [Required(ErrorMessage = "Sales Person is required.")]
        public SalesPerson SalesPerson { get; set; }

        public DateTime? OrderedDate { get; set; } = DateTime.Now;
    }

    class SalesOrderItemViewModel
    {

        [Required(ErrorMessage = "Product is required.")]
        public Product Product { get; set; }

        public int Available { get; set; }


        [Required(ErrorMessage = "Quantity is required.")]
        [Range(1, int.MaxValue, ErrorMessage = "Quantity must not be 0.")]
        public int Quantity { get; set; }

        [Range(0, 1, ErrorMessage = "Discount must be between 0 and 1.")]
        public decimal Discount { get; set; }


        [Required(ErrorMessage = "Unit Price is required.")]
        [Precision(19, 2)]
        [Range(0.01, double.MaxValue, ErrorMessage = "Unit Price must be greater than 0.")]
        public decimal UnitPrice { get; set; }

        public decimal SubTotal
        {
            get
            {
                return Quantity * UnitPrice * (1 - Discount);
            }
            set { }
        }
    }

    private ApplicationUser? CurrentUser { get; set; } // Replace ApplicationUser with your actual user class
    private bool autoFill = false;
    private bool isEmpty = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _branches = await BranchService.GetAllBranchAsync();
        _customer = await CustomerService.GetAllCustomerAsync();
        _salesperson = await SalesPersonService.GetAllSalesPersonAsync();

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUser = await UserManager.GetUserAsync(user);

            if (CurrentUser != null)
            {
                autoFill = CurrentUser.BranchId.HasValue;
                if (_branches.Any() && CurrentUser.BranchId.HasValue)
                {
                    SalesOrder.OrderBranch = _branches.FirstOrDefault(b => b.BranchId == CurrentUser.BranchId);
                    if (SalesOrder.OrderBranch == null)
                    {
                        // Handle the case where the user's BranchId doesn't match any existing branch
                        Console.WriteLine($"Warning: User's BranchId '{CurrentUser.BranchId}' not found.");
                        // Optionally, redirect the user or display an error.
                        // NavigationManager.NavigateTo("/error", true);
                    }
                }
            }

        }
    }

    private async Task AddSalesOrder(EditContext context)
    {
        if (context.Validate())
        {
            try
            {
                var so_data = new SalesOrder
                    {
                        CustomerId = _customer.First(c => c.CustomerName == SalesOrder.Customer.CustomerName).CustomerId,
                        SalesPersonId = _salesperson.First(sp => sp.FullName == SalesOrder.SalesPerson.FullName).SalesPersonId,
                        OrderBranchId = _branches.First(b => b.BranchName == SalesOrder.OrderBranch.BranchName).BranchId,
                        CreatedById = CurrentUser.Id,
                        TotalAmount = SalesOrderItems.Sum(item => item.SubTotal),

                    };

                var soi_data = SalesOrderItems.Select(vm => new SalesOrderItem
                    {
                        ProductId = vm.Product.ProductId,
                        Quantity = vm.Quantity,
                        UnitPrice = vm.UnitPrice,
                        Discount = vm.Discount,
                        SubTotal = vm.SubTotal,
                    }).ToList();

                await SalesOrderService.AddSalesOrderAsync(so_data, soi_data);
                Snackbar.Add("Sales order added.", Severity.Success);
                SalesOrder = new(); // Reset
                await dataGrid.ReloadServerData(); // Reload grid if it exists
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private void HandleInvalidSubmit(EditContext context)
    {
        var validationResults = context.GetValidationMessages();

        // Optionally, you can still add specific messages for certain scenarios
        // but ensure you don't duplicate messages already covered by DataAnnotations.
        if (SalesOrderItem.Product == null && !validationResults.Any(m => m.Contains("Product is required")))
        {
            Snackbar.Add("Product is Required", Severity.Error);
        }
        else if (SalesOrderItem.Quantity > SalesOrderItem.Available && !validationResults.Any(m => m.Contains("exceeds available")))
        {
            Snackbar.Add("Quantity cannot exceed the available quantity.", Severity.Error);
        }
        else if (SalesOrderItem.Quantity < 1 && !validationResults.Any(m => m.Contains("greater than 0"))) // Assuming [Range(1, ...)]
        {
            Snackbar.Add("Quantity must be greater than 0.", Severity.Error);
        }
        else if (SalesOrderItem.Quantity < 0 && !validationResults.Any(m => m.Contains("non-negative")))
        {
            return;
        }

    }


    private Task AddBatchSalesOrderItem(EditContext context)
    {

        if (context.Validate())
        {
            SalesOrderItem.Discount = (decimal)_discountInput / 100;
            SalesOrderItem.SubTotal = SalesOrderItem.Quantity * SalesOrderItem.UnitPrice * (1 - SalesOrderItem.Discount);
            SalesOrderItems.Add(SalesOrderItem);
            SalesOrderItem = new SalesOrderItemViewModel(); // Reset the ViewModel
            _discountInput = 0; // Reset the input field
            isEmpty = !SalesOrderItems.Any();
        }

        return dataGrid.ReloadServerData();
    }

    private async Task<IEnumerable<Product>> SearchProduct(string value, CancellationToken token)
    {
        if (SalesOrder.OrderBranch == null)
        {
            return new List<Product>();
        }


        // Filter inventories based on the source branch
        _sourceBranchInventories = await InventoryService.GetAllInventoryByBranchAsync(SalesOrder.OrderBranch.BranchId);


        if (string.IsNullOrEmpty(value))
        {
            // Return all available products from the source branch, excluding already added ones.
            return _sourceBranchInventories
                .Where(p => !SalesOrderItems.Any(poi => poi.Product.ProductId == p.Product.ProductId))
                .Select(i => i.Product);
        }


        // Filter products based on search value and exclude already added ones, from the source branch.
        return _sourceBranchInventories
            .Where(p => p.Product.ProductName.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
                        p.Product.SKU.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Where(p => !SalesOrderItems.Any(poi => poi.Product.ProductId == p.Product.ProductId))
            .Select(i => i.Product);

    }

    private async Task<IEnumerable<Customer>> SearchCustomer(string value, CancellationToken token)
    {

        if (string.IsNullOrEmpty(value))
        {
            return _customer;
        }

        return _customer.Where(c => c.CustomerName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<SalesPerson>> SearchSalesPerson(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _salesperson;
        }

        return _salesperson.Where(sp => sp.FullName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Branch>> SearchBranch(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _branches;
        }

        return _branches.Where(b => b.BranchName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    Task RemoveBatchProduct(SalesOrderItemViewModel item)
    {
        SalesOrderItems.Remove(item);
        return dataGrid.ReloadServerData();

    }

    private void After()
    {
        SalesOrderItem.Available = _sourceBranchInventories.Where(i => i.Product.ProductId == SalesOrderItem.Product.ProductId)
                                 .First().AvailableQuantity;

        SalesOrderItem.UnitPrice = _sourceBranchInventories.Where(i => i.Product.ProductId == SalesOrderItem.Product.ProductId)
       .First().Product.UnitPrice;

        _discountInput = (int)(SalesOrderItem.Discount * 100); // Convert decimal back to whole number for input
    }
    private async void HandleChangeSourceBranch()
    {
        _sourceBranchInventories = await InventoryService.GetAllInventoryByBranchAsync(SalesOrder.OrderBranch.BranchId);
        SalesOrderItem = new();

    }

}
