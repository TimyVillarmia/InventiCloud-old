@page "/purchase/suppliers/{SupplierCode}"
@using InventiCloud.Components.UI
@using InventiCloud.Data
@using InventiCloud.Services.Interface
@using InventiCloud.Utils
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@inject ISupplierService SupplierService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Create Supplier</PageTitle>

<MudContainer Class="pt-5" MaxWidth="MaxWidth.Medium">
    <div class="d-flex gap-4 align-items-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="back" Href="/purchase/suppliers" />
        <MudText Typo="Typo.h4">@Supplier.SupplierName</MudText>
    </div>

    <EditForm method="post" Model="Supplier" OnValidSubmit="SaveChanges" FormName="update" Enhance>
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">SUPPLIER DETAILS</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="Supplier.SupplierName" Label="Supplier Name" For="@(() => Supplier.SupplierName)" Variant="Variant.Outlined" ReadOnly="@(!IsAdminUser)" />
                <MudTextField @bind-Value="Supplier.SupplierCode" Label="Supplier Code" For="@(() => Supplier.SupplierCode)" Variant="Variant.Outlined" ReadOnly="@(!IsAdminUser)" />
                <MudTextField @bind-Value="Supplier.Company" Label="Company Name" For="@(() => Supplier.Company)" Variant="Variant.Outlined" ReadOnly="@(!IsAdminUser)" />
                <MudTextField @bind-Value="Supplier.Address" Label="Address" For="@(() => Supplier.Address)" Variant="Variant.Outlined" ReadOnly="@(!IsAdminUser)" />
                <MudTextField @bind-Value="Supplier.ContactPerson" Label="Contact Person" For="@(() => Supplier.ContactPerson)" Variant="Variant.Outlined" ReadOnly="@(!IsAdminUser)" />
                <MudTextField @bind-Value="Supplier.Email" Label="Email Address" For="@(() => Supplier.Email)" Variant="Variant.Outlined" ReadOnly="@(!IsAdminUser)" />
                <MudTextField @bind-Value="Supplier.PhoneNumber" Label="Phone Number" For="@(() => Supplier.PhoneNumber)" Variant="Variant.Outlined" ReadOnly="@(!IsAdminUser)" />
            </MudItem>
            <MudItem xs="12" Class="d-flex align-md-end">
                @if (IsAdminUser)
                {
                    <MudButton OnClick="() => OpenDialogAsync()" Variant="Variant.Outlined" Color="Color.Error" Class="ml-auto">DELETE</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" OnClick="SaveChanges" Variant="Variant.Filled" Color="Color.Primary" Class="ml-4">SAVE CHANGES</MudButton>
                }

            </MudItem>
        </MudGrid>
        
    </EditForm>
</MudContainer>

@code {
    [SupplyParameterFromForm]
    private Supplier Supplier { get; set; } = new();


    [Parameter]
    public string SupplierCode { get; set; }
    private bool IsAdminUser { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Supplier = await SupplierService.GetSupplierByCodeAsync(SupplierCode);

        if (Supplier is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            IsAdminUser = user.IsInRole("Administrator"); // Check if the user has the "Administrator" role
        }


    }

    private async Task SaveChanges()
    {


        try
        {
            await SupplierService.UpdateSupplierAsync(Supplier);
            Snackbar.Add($"Supplier {Supplier.SupplierName} Updated", Severity.Success);
            NavigationManager.NavigateTo("/purchase/suppliers");

        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }




    // events
    async Task OpenDialogAsync()
    {
        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to delete the category '{Supplier.SupplierName}'? This action cannot be undone."},
            { "Button1Text", "Delete" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Supplier", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await SupplierService.DeleteSupplierAsync(Supplier);
                Snackbar.Add("Supplier Deleted", Severity.Success);
                NavigationManager.NavigateTo($"/purchase/suppliers");


            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("An error occurred while deleting the category.", Severity.Error);
            }
        }

    }
}
