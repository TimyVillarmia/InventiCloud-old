@page "/purchase/suppliers"
@using InventiCloud.Components.UI
@using InventiCloud.Services
@using InventiCloud.Services.Interface
@using Microsoft.EntityFrameworkCore
@using InventiCloud.Entities
@using InventiCloud.Data
@inject IDbContextFactory<InventiCloud.Data.ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject ISupplierService SupplierService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
<PageTitle>Index</PageTitle>

<MudText Class="bold mb-2" Typo="Typo.h4">Suppliers</MudText>
@if (_suppliers == null)
{
    <MudContainer Class="d-flex justify-center align-items-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else
{

    @if (!_suppliers.Any())
    {

        <MudPaper Height="500px" Class="justify-center align-content-center">
            <MudText Class="bol" Typo="Typo.h6" Align="Align.Center">No Suppliers Found</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center">
                You don't have any suppliers yet. Click the "Add Supplier" button to get started.
            </MudText>
            <MudContainer Class="d-flex justify-center mt-2">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Href="/purchase/suppliers/create" Color="Color.Primary" Class="text-uppercase">
                    Add Supplier
                </MudButton>
            </MudContainer>
        </MudPaper>        
    }

    else
    {

        <MudGrid>
            <MudItem sm="6">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Variant="Variant.Outlined" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </MudStack>

            </MudItem>

            <MudItem sm="6">
                <MudButton Variant="Variant.Filled" Href="/purchase/suppliers/create" Color="Color.Primary" Class="text-uppercase">
                    Create Supplier
                </MudButton>
            </MudItem>

        </MudGrid>


        <MudDataGrid @ref="dataGrid" T="Supplier" ServerData="ServerReload" RowClick="@RowClicked">
            <Columns>
                <PropertyColumn Property="supplier => supplier.SupplierCode" Title="Supplier Code" />
                <PropertyColumn Property="supplier => supplier.SupplierName" Title="Supplier Name" />
                <PropertyColumn Property="supplier => supplier.City" Title="City" />
                <PropertyColumn Property="supplier => supplier.Country" Title="Country" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" OnClick="@(() => OpenDialogAsync(context.Item))" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Supplier" />
            </PagerContent>
        </MudDataGrid>

    }

}

@code {
    string? searchString;

    MudDataGrid<Supplier> dataGrid = new();

    private IEnumerable<Supplier> _suppliers = new List<Supplier>();
    private IEnumerable<Supplier> _filteredsuppliers = new List<Supplier>();

    protected override async Task OnInitializedAsync()
    {
        _suppliers = await SupplierService.GetAllSupplierAsync();
    }

    async Task OpenDialogAsync(Supplier supplier)
    {

        var parameters = new DialogParameters<DialogComponent>
        {
            {x => x.ContentText, $"Are you sure you want to delete the supplier '{supplier.SupplierName}'? This action cannot be undone."},
            { "Button1Text", "Confirm" },
            { "Button2Text", "Cancel" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete Supplier", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await SupplierService.DeleteSupplierAsync(supplier);
                await dataGrid.ReloadServerData();
                Snackbar.Add("Supplier Deleted", Severity.Success);

            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    void RowClicked(DataGridRowClickEventArgs<Supplier> args)
    {


        if (args.Item == null)
        {
            return;
        }

        NavigationManager.NavigateTo($"/purchase/suppliers/{args.Item.SupplierCode}");

    }

    private async Task<GridData<Supplier>> ServerReload(GridState<Supplier> state)
    {

        _filteredsuppliers = _suppliers;


        _filteredsuppliers = _filteredsuppliers.Where(supplier =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (supplier.SupplierCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (supplier.SupplierName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (supplier.City.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (supplier.Country.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = _filteredsuppliers.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(Supplier.SupplierName):
                    _filteredsuppliers = _filteredsuppliers.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.SupplierName
                    );
                    break;
            }
        }

        var pagedData = _filteredsuppliers.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<Supplier>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }


    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }
}
