@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using InventiCloud.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<MudGrid Spacing="0" Class="py-4" Style="height:100vh;">
    <MudItem xs="12" md="6" >
       
        <MudContainer MaxWidth="MaxWidth.Small" Style="height:100%;">
            <div class="mb-4">
                <MudImage Src="images/your_logo.png" Alt="InventiCloud Logo" Width="150" Height="150" />
            </div>
            <div class="mb-12">
                <MudText Typo="Typo.h3">Hello,</MudText>
                <MudText Typo="Typo.h3">Welcome to InventiCloud</MudText>
                <MudText Typo="Typo.body1" Color="Color.Default">A cloud powered inventory and sales system</MudText>
            </div>

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="10">
                        <MudStaticTextField For="@(() => Input.UserName)" @bind-Value="Input.UserName"
                                            Label="Username" Placeholder="username" Variant="Variant.Outlined"
                                            UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                    </MudItem>
                    <MudFlexBreak />

                    <MudItem xs="10">
                        <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password" Variant="Variant.Outlined"
                                            Label="Password" InputType="InputType.Password" Placeholder="password"
                                            UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                    </MudItem>
                    <MudFlexBreak />

                    <MudItem xs="6" Style="padding-top: 0px;">
                        <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                    </MudItem>
                    <MudFlexBreak />

                    <MudItem xs="4">
                        <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Sign in</MudStaticButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Height="100%" Width="100%" Class="mud-theme-primary rounded-xl"></MudPaper>
    </MudItem>
</MudGrid>




@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("/home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {

            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
